                        ; --------------------------------------
                        ; zasm: assemble "_runtime.asm"
                        ; date: 2021-10-31 12:09:12
                        ; --------------------------------------


0202:                   	.org $202
0202:                   M8_C_boot:
0202: 3100F0   [10]     	ld sp,$F000
0205: C30202   [20]     	jp $202
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        ;
                        ;		Name : 		binary.asm
                        ;		Author :	Paul Robson (paul@robsons.org.uk)
                        ;		Date : 		31st October 2021
                        ;		Purpose :	Binary operators (A ? B -> A)
                        ;
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        
                        ; ***************************************************************************************
                        
0208:                   M8_C__c60_:
0208: 7C       [ 4]     	ld 		a,h 								 	; check if signs different.
0209: AA       [ 8]     	xor 	d
020A: 87       [12]     	add 	a,a 									; CS if different
020B: 3004     [19|24]  	jr 		nc,__less_samesign
020D: 7A       [23]     	ld 		a,d 									; different. set CS to sign of B
020E: 87       [27]     	add 	a,a 									; if set (negative) B must be < A as A is +ve
020F: 1805     [39]     	jr 		__less_returnc
0211:                   __less_samesign:
0211: D5       [11]     	push 	de 										; save DE
0212: EB       [15]     	ex 		de,hl 									; -1 if B < A
0213: ED52     [30]     	sbc 	hl,de 									; calculate B - A , hencs CS if < (Carry clear by add a,a)
0215: D1       [40]     	pop 	de 										; restore DE
0216:                   __less_returnc:
0216: 3E00     [ 7]     	ld 		a,0 									; A 0
0218: DE00     [14]     	sbc 	a,0 									; A $FF if CS.
021A: 6F       [18]     	ld 		l,a 									; put in HL
021B: 67       [22]     	ld 		h,a
021C: C9       [32]     	ret
021D:                   M8_C__c60__end:
                        
                        ; ***************************************************************************************
                        
021D:                   M8_C__c61_:
021D: 7C       [ 4]     	ld 		a,h 									; H = H ^ D
021E: AA       [ 8]     	xor 	d
021F: 67       [12]     	ld 		h,a
0220: 7D       [16]     	ld 		a,l 									; A = (L ^ E) | (H ^ D)
0221: AB       [20]     	xor 	e
0222: B4       [24]     	or 		h 										; if A == 0 they are the same.
0223: 210000   [34]     	ld 		hl,$0000 								; return 0 if different
0226: C0       [39|45]  	ret 	nz
0227: 2B       [45]     	dec 	hl 										; return -1
0228: C9       [55]     	ret
0229:                   M8_C__c61__end:
                        
                        ; ***************************************************************************************
                        
0229:                   M8_C__c45_:
0229: D5       [11]     	push 	de 										; save DE
022A: EB       [15]     	ex 		de,hl 									; HL = B, DE = A
022B: AF       [19]     	xor 	a  										; clear carry
022C: ED52     [34]     	sbc 	hl,de 									; calculate B-A
022E: D1       [44]     	pop 	de 										; restore DE
022F: C9       [54]     	ret
0230:                   M8_C__c45__end:
                        
                        ; ***************************************************************************************
                        
0230:                   M8_M__c43_:
0230: 19       [11]     	add 	hl,de
0231:                   M8_M__c43__end:
                        
                        ; ***************************************************************************************
                        
0231:                   M8_C_and:
0231: 7C       [ 4]     	ld 		a,h
0232: A2       [ 8]     	and 	d
0233: 67       [12]     	ld 		h,a
0234: 7D       [16]     	ld 		a,l
0235: A3       [20]     	and 	e
0236: 6F       [24]     	ld 		l,a
0237: C9       [34]     	ret
0238:                   M8_C_and_end:
                        
                        ; ***************************************************************************************
                        
0238:                   M8_C_or:
0238: 7C       [ 4]     	ld 		a,h
0239: B2       [ 8]     	or 		d
023A: 67       [12]     	ld 		h,a
023B: 7D       [16]     	ld 		a,l
023C: B3       [20]     	or 		e
023D: 6F       [24]     	ld 		l,a
023E: C9       [34]     	ret
023F:                   M8_C_or_end:
                        
                        ; ***************************************************************************************
                        
023F:                   M8_C_xor:
023F: 7C       [ 4]     	ld 		a,h
0240: AA       [ 8]     	xor 	d
0241: 67       [12]     	ld 		h,a
0242: 7D       [16]     	ld 		a,l
0243: AB       [20]     	xor 	e
0244: 6F       [24]     	ld 		l,a
0245: C9       [34]     	ret
0246:                   M8_C_xor_end:
                        
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        ;
                        ;		Name : 		divide.asm
                        ;		Author :	Paul Robson (paul@robsons.org.uk)
                        ;		Date : 		31st October 2021
                        ;		Purpose :	Division
                        ;
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        
                        ; ***************************************************************************************
                        
0246:                   M8_C__c47_:
0246: D5       [11]     	push 	de
0247: CD5302   [28]     	call 	DIVDivideMod16
024A: EB       [32]     	ex 		de,hl
024B: D1       [42]     	pop 	de
024C: C9       [52]     	ret
024D:                   M8_C__c47__end:
                        
                        ; ***************************************************************************************
                        
024D:                   M8_C_mod:
024D: D5       [11]     	push 	de
024E: CD5302   [28]     	call 	DIVDivideMod16
0251: D1       [38]     	pop 	de
0252: C9       [48]     	ret
0253:                   M8_C_mod_end:
                        
                        ; *********************************************************************************
                        ;
                        ;			Calculates DE / HL. On exit DE = result, HL = remainder
                        ;
                        ; *********************************************************************************
                        
0253:                   DIVDivideMod16:
0253: C5       [11]     	push 	bc
0254: 42       [15]     	ld 		b,d 				; DE
0255: 4B       [19]     	ld 		c,e
0256: EB       [23]     	ex 		de,hl
0257: 210000   [33]     	ld 		hl,0
025A: 78       [37]     	ld 		a,b
025B: 0608     [44]     	ld 		b,8
025D:                   Div16_Loop1:
025D: 17       [ 4]     	rla
025E: ED6A     [19]     	adc 	hl,hl
0260: ED52     [34]     	sbc 	hl,de
0262: 3001     [41|46]  	jr 		nc,Div16_NoAdd1
0264: 19       [52]     	add 	hl,de
0265:                   Div16_NoAdd1:
0265: 10F6     [ 8|13]  	djnz 	Div16_Loop1
0267: 17       [12]     	rla
0268: 2F       [16]     	cpl
0269: 47       [20]     	ld 		b,a
026A: 79       [24]     	ld 		a,c
026B: 48       [28]     	ld 		c,b
026C: 0608     [35]     	ld 		b,8
026E:                   Div16_Loop2:
026E: 17       [ 4]     	rla
026F: ED6A     [19]     	adc 	hl,hl
0271: ED52     [34]     	sbc 	hl,de
0273: 3001     [41|46]  	jr 		nc,Div16_NoAdd2
0275: 19       [52]     	add 	hl,de
0276:                   Div16_NoAdd2:
0276: 10F6     [ 8|13]  	djnz 	Div16_Loop2
0278: 17       [12]     	rla
0279: 2F       [16]     	cpl
027A: 51       [20]     	ld 		d,c
027B: 5F       [24]     	ld 		e,a
027C: C1       [34]     	pop 	bc
027D: C9       [44]     	ret
                        
                        
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        ;
                        ;		Name : 		memory.asm
                        ;		Author :	Paul Robson (paul@robsons.org.uk)
                        ;		Date : 		31st October 2021
                        ;		Purpose :	Memory operators
                        ;
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        
027E:                   M8_M__c33_:
027E: 73       [ 7]     		ld 		(hl),e
027F: 23       [13]     		inc 	hl
0280: 72       [20]     		ld 		(hl),d
0281: 2B       [26]     		dec 	hl
0282:                   M8_M__c33__end:
                        
                        ; ***************************************************************************************
                        
0282:                   M8_M__c64_:
0282: 7E       [ 7]     		ld 		a,(hl)
0283: 23       [13]     		inc 	hl
0284: 66       [20]     		ld		h,(hl)
0285: 6F       [24]     		ld		l,a
0286:                   M8_M__c64__end:
                        
                        ; ***************************************************************************************
                        
0286:                   M8_C__c43__c33_:
0286: 7E       [ 7]     		ld 		a,(hl)
0287: 83       [11]     		add 	a,e
0288: 77       [18]     		ld 		(hl),a
0289: 23       [24]     		inc 	hl
028A: 7E       [31]     		ld 		a,(hl)
028B: 8A       [35]     		adc 	a,d
028C: 77       [42]     		ld 		(hl),a
028D: 2B       [48]     		dec 	hl
028E: C9       [58]     		ret
028F:                   M8_C__c43__c33__end:
                        
                        ; ***************************************************************************************
                        
028F:                   M8_M_c_c33_:
028F: 73       [ 7]     		ld 		(hl),e
0290:                   M8_M_c_c33__end:
                        
                        ; ***************************************************************************************
                        
0290:                   M8_M_c_c64_:
0290: 6E       [ 7]     		ld 		l,(hl)
0291: 2600     [14]     		ld 		h,0
0293:                   M8_M_c_c64__end:
                        
                        ; ***************************************************************************************
                        
0293:                   M8_C_p_c64_:
0293: C5       [11]     		push 	bc
0294: 44       [15]     		ld		b,h
0295: 4D       [19]     		ld 		c,l
0296: ED68     [31]     		in 		l,(c)
0298: 2600     [38]     		ld 		h,0
029A: C1       [48]     		pop 	bc
029B: C9       [58]     		ret
029C:                   M8_C_p_c64__end:
                        
                        ; ***************************************************************************************
                        
029C:                   M8_C_p_c33_:
029C: C5       [11]     		push 	bc
029D: E5       [22]     		push 	hl
029E: 7B       [26]     		ld 		a,e
029F: 44       [30]     		ld		b,h
02A0: 4D       [34]     		ld 		c,l
02A1: ED79     [46]     		out 	(c),a
02A3: E1       [56]     		pop 	hl
02A4: C1       [66]     		pop 	bc
02A5: C9       [76]     		ret
02A6:                   M8_C_p_c33__end:
                        
                        
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        ;
                        ;		Name : 		miscellany.asm
                        ;		Author :	Paul Robson (paul@robsons.org.uk)
                        ;		Date : 		31st October 2021
                        ;		Purpose :	Miscellaneous words
                        ;
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        
02A6:                   M8_C_copy:
02A6: 78       [ 4]     		ld 		a,b 								; exit if C = 0
02A7: B1       [ 8]     		or 		c
02A8: C8       [13|19]  		ret 	z
                        
02A9: C5       [24]     		push 	bc 									; BC count
02AA: D5       [35]     		push 	de 									; DE target
02AB: E5       [46]     		push 	hl 									; HL source
                        
02AC: AF       [50]     		xor 	a 									; Clear C
02AD: ED52     [65]     		sbc 	hl,de 								; check overlap ?
02AF: 300B     [72|77]  		jr 		nc,__copy_gt_count 					; if source after target
02B1: 19       [83]     		add 	hl,de 								; undo subtract
                        
02B2: 09       [94]     		add 	hl,bc 								; add count to HL + DE
02B3: EB       [98]     		ex 		de,hl
02B4: 09       [109]    		add 	hl,bc
02B5: EB       [113]    		ex 		de,hl
02B6: 1B       [119]    		dec 	de 									; dec them, so now at the last byte to copy
02B7: 2B       [125]    		dec 	hl
02B8: EDB8     [141|21] 		lddr 										; do it backwards
02BA: 1803     [153]    		jr 		__copy_exit
                        
02BC:                   __copy_gt_count:
02BC: 19       [11]     		add 	hl,de 								; undo subtract
02BD: EDB0     [27|21]  		ldir										; do the copy
02BF:                   __copy_exit:
02BF: E1       [10]     		pop 	hl 									; restore registers
02C0: D1       [20]     		pop 	de
02C1: C1       [30]     		pop 	bc
02C2: C9       [40]     		ret
02C3:                   M8_C_copy_end:
                        
                        ; ***************************************************************************************
                        
02C3:                   M8_C_fill:
02C3: 78       [ 4]     		ld 		a,b 								; exit if C = 0
02C4: B1       [ 8]     		or 		c
02C5: C8       [13|19]  		ret 	z
                        
02C6: C5       [24]     		push 	bc 									; BC count
02C7: D5       [35]     		push 	de 									; DE target, L byte
02C8:                   __fill_loop:
02C8: 7D       [ 4]     		ld 		a,l 								; copy a byte
02C9: 12       [11]     		ld 		(de),a
02CA: 13       [17]     		inc 	de 									; bump pointer
02CB: 0B       [23]     		dec 	bc 									; dec counter and loop
02CC: 78       [27]     		ld 		a,b
02CD: B1       [31]     		or 		c
02CE: 20F8     [38|43]  		jr 		nz,__fill_loop
02D0: D1       [48]     		pop 	de 									; restore
02D1: C1       [58]     		pop 	bc
02D2: C9       [68]     		ret
02D3:                   M8_C_fill_end:
                        
                        ; ***************************************************************************************
                        
02D3:                   M8_C_halt:
02D3:                   __halt_loop:
02D3: F3       [ 4]     		di
02D4: 76       [ 8]     		halt
02D5: 18FC     [20]     		jr 		__halt_loop
02D7:                   M8_C_halt_end:
                        
                        ; ***************************************************************************************
                        
02D7:                   M8_M_break:
02D7: 76                		db 		$76
02D8:                   M8_M_break_end:
                        
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        ;
                        ;		Name : 		multiply.asm
                        ;		Author :	Paul Robson (paul@robsons.org.uk)
                        ;		Date : 		31st October 2021
                        ;		Purpose :	Multiplication
                        ;
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        
                        
02D8:                   M8_C__c42_:
02D8: C3DB02   [10]     	jp  	MULTMultiply16
02DB:                   M8_C__c42__end:
                        
                        ; *********************************************************************************
                        ;
                        ;								Does HL = HL * DE
                        ;
                        ; *********************************************************************************
                        
02DB:                   MULTMultiply16:
02DB: C5       [11]     		push 	bc
02DC: D5       [22]     		push 	de
02DD: 44       [26]     		ld 		b,h 							; get multipliers in DE/BC
02DE: 4D       [30]     		ld 		c,l
02DF: 210000   [40]     		ld 		hl,0 							; zero total
02E2:                   __Core__Mult_Loop:
02E2: CB41     [ 8]     		bit 	0,c 							; lsb of shifter is non-zero
02E4: 2801     [15|20]  		jr 		z,__Core__Mult_Shift
02E6: 19       [26]     		add 	hl,de 							; add adder to total
02E7:                   __Core__Mult_Shift:
02E7: CB38     [ 8]     		srl 	b 								; shift BC right.
02E9: CB19     [16]     		rr 		c
02EB: EB       [20]     		ex 		de,hl 							; shift DE left
02EC: 29       [31]     		add 	hl,hl
02ED: EB       [35]     		ex 		de,hl
02EE: 78       [39]     		ld 		a,b 							; loop back if BC is nonzero
02EF: B1       [43]     		or 		c
02F0: 20F0     [50|55]  		jr 		nz,__Core__Mult_Loop
02F2: D1       [60]     		pop 	de
02F3: C1       [70]     		pop 	bc
02F4: C9       [80]     		ret
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        ;
                        ;		Name : 		register.asm
                        ;		Author :	Paul Robson (paul@robsons.org.uk)
                        ;		Date : 		31st October 2021
                        ;		Purpose :	Register manipulation
                        ;
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        
02F5:                   M8_M_swap:
02F5: EB       [ 4]     		ex 		de,hl
02F6:                   M8_M_swap_end:
                        
                        ; ***************************************************************************************
                        
02F6:                   M8_M_a_c62_b:
02F6: 54       [ 4]     		ld 		d,h
02F7: 5D       [ 8]     		ld 		e,l
02F8:                   M8_M_a_c62_b_end:
                        
02F8:                   M8_M_a_c62_c:
02F8: 44       [ 4]     		ld 		b,h
02F9: 4D       [ 8]     		ld 		c,l
02FA:                   M8_M_a_c62_c_end:
                        
                        ; ***************************************************************************************
                        
02FA:                   M8_M_b_c62_a:
02FA: 62       [ 4]     		ld 		h,d
02FB: 6B       [ 8]     		ld 		l,e
02FC:                   M8_M_b_c62_a_end:
                        
02FC:                   M8_M_b_c62_c:
02FC: 42       [ 4]     		ld 		b,d
02FD: 4B       [ 8]     		ld 		c,e
02FE:                   M8_M_b_c62_c_end:
                        
                        ; ***************************************************************************************
                        
02FE:                   M8_M_c_c62_a:
02FE: 60       [ 4]     		ld 		h,b
02FF: 69       [ 8]     		ld 		l,c
0300:                   M8_M_c_c62_a_end:
                        
0300:                   M8_M_c_c62_b:
0300: 50       [ 4]     		ld 		d,b
0301: 59       [ 8]     		ld 		e,c
0302:                   M8_M_c_c62_b_end:
                        
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        ;
                        ;		Name : 		stack.asm
                        ;		Author :	Paul Robson (paul@robsons.org.uk)
                        ;		Date : 		31st October 2021
                        ;		Purpose :	Stack words
                        ;
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        
0302:                   M8_M_push:
0302: E5       [11]     	push 	hl
0303:                   M8_M_push_end:
                        
0303:                   M8_M_pop:
0303: EB       [ 4]     	ex 		de,hl
0304: E1       [14]     	pop 	hl
0305:                   M8_M_pop_end:
                        
                        ; ***************************************************************************************
                        
0305:                   M8_M_a_c62_r:
0305: E5       [11]     	push 	hl
0306:                   M8_M_a_c62_r_end:
                        
0306:                   M8_M_r_c62_a:
0306: E1       [10]     	pop 	hl
0307:                   M8_M_r_c62_a_end:
                        
                        ; ***************************************************************************************
                        
0307:                   M8_M_b_c62_r:
0307: D5       [11]     	push 	de
0308:                   M8_M_b_c62_r_end:
                        
0308:                   M8_M_r_c62_b:
0308: D1       [10]     	pop 	de
0309:                   M8_M_r_c62_b_end:
                        
                        ; ***************************************************************************************
                        
0309:                   M8_M_c_c62_r:
0309: C5       [11]     	push 	bc
030A:                   M8_M_c_c62_r_end:
                        
030A:                   M8_M_r_c62_c:
030A: C1       [10]     	pop 	bc
030B:                   M8_M_r_c62_c_end:
                        
                        
                        ; ***************************************************************************************
                        
030B:                   M8_M_ab_c62_r:
030B: D5       [11]     	push 	de
030C: E5       [22]     	push 	hl
030D:                   M8_M_ab_c62_r_end:
                        
030D:                   M8_M_r_c62_ab:
030D: E1       [10]     	pop 	hl
030E: D1       [20]     	pop 	de
030F:                   M8_M_r_c62_ab_end:
                        
                        ; ***************************************************************************************
                        
030F:                   M8_M_abc_c62_r:
030F: C5       [11]     	push 	bc
0310: D5       [22]     	push 	de
0311: E5       [33]     	push 	hl
0312:                   M8_M_abc_c62_r_end:
                        
0312:                   M8_M_r_c62_abc:
0312: E1       [10]     	pop 	hl
0313: D1       [20]     	pop 	de
0314: C1       [30]     	pop 	bc
0315:                   M8_M_r_c62_abc_end:
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        ;
                        ;		Name : 		unary.asm
                        ;		Author :	Paul Robson (paul@robsons.org.uk)
                        ;		Date : 		31st October 2021
                        ;		Purpose :	Unary operators (A ? B -> A)
                        ;
                        ; ***************************************************************************************
                        ; ***************************************************************************************
                        
0315:                   M8_M__c45__c45__c45_:
0315: 2B       [ 6]     		dec 	hl
0316: 2B       [12]     		dec 	hl
0317:                   M8_M__c45__c45__c45__end:
                        
                        ; ***************************************************************************************
                        
0317:                   M8_M__c45__c45_:
0317: 2B       [ 6]     		dec 	hl
0318:                   M8_M__c45__c45__end:
                        
                        ; ***************************************************************************************
                        
0318:                   M8_M__c43__c43_:
0318: 23       [ 6]     		inc 	hl
0319:                   M8_M__c43__c43__end:
                        
                        ; ***************************************************************************************
                        
0319:                   M8_M__c43__c43__c43_:
0319: 23       [ 6]     		inc 	hl
031A: 23       [12]     		inc 	hl
031B:                   M8_M__c43__c43__c43__end:
                        
                        ; ***************************************************************************************
                        
031B:                   M8_C_0_c45_:
031B:                   __negate:
031B: 7C       [ 4]     		ld 		a,h
031C: 2F       [ 8]     		cpl
031D: 67       [12]     		ld 		h,a
031E: 7D       [16]     		ld 		a,l
031F: 2F       [20]     		cpl
0320: 6F       [24]     		ld 		l,a
0321: 23       [30]     		inc 	hl
0322: C9       [40]     		ret
0323:                   M8_C_0_c45__end:
                        
                        ; ***************************************************************************************
                        
0323:                   M8_C_0_c60_:
0323: CB7C     [ 8]     		bit 	7,h
0325: 210000   [18]     		ld 		hl,$0000
0328: C8       [23|29]  		ret 	z
0329: 2B       [29]     		dec 	hl
032A: C9       [39]     		ret
032B:                   M8_C_0_c60__end:
                        
                        ; ***************************************************************************************
                        
032B:                   M8_C_0_c61_:
032B: 7C       [ 4]     		ld 		a,h
032C: B5       [ 8]     		or 		l
032D: 210000   [18]     		ld 		hl,$0000
0330: C0       [23|29]  		ret 	nz
0331: 2B       [29]     		dec 	hl
0332: C9       [39]     		ret
0333:                   M8_C_0_c61__end:
                        
                        ; ***************************************************************************************
                        
0333:                   M8_M_2_c42_:
0333: 29       [11]     		add 	hl,hl
0334:                   M8_M_2_c42__end:
                        
0334:                   M8_M_4_c42_:
0334: 29       [11]     		add 	hl,hl
0335: 29       [22]     		add 	hl,hl
0336:                   M8_M_4_c42__end:
                        
0336:                   M8_M_8_c42_:
0336: 29       [11]     		add 	hl,hl
0337: 29       [22]     		add 	hl,hl
0338: 29       [33]     		add 	hl,hl
0339:                   M8_M_8_c42__end:
                        
0339:                   M8_M_16_c42_:
0339: 29       [11]     		add 	hl,hl
033A: 29       [22]     		add 	hl,hl
033B: 29       [33]     		add 	hl,hl
033C: 29       [44]     		add 	hl,hl
033D:                   M8_M_16_c42__end:
                        
033D:                   M8_M_256_c42_:
033D: 65       [ 4]     		ld 		h,l
033E: 2E00     [11]     		ld		l,0
0340:                   M8_M_256_c42__end:
                        
                        ; ***************************************************************************************
                        
0340:                   M8_M_2_c47_:
0340: CB2C     [ 8]     		sra 	h
0342: CB1D     [16]     		rr 		l
0344:                   M8_M_2_c47__end:
                        
0344:                   M8_M_4_c47_:
0344: CB2C     [ 8]     		sra 	h
0346: CB1D     [16]     		rr 		l
0348: CB2C     [24]     		sra 	h
034A: CB1D     [32]     		rr 		l
034C:                   M8_M_4_c47__end:
                        
034C:                   M8_C_8_c47_:
034C: CB2C     [ 8]     		sra 	h
034E: CB1D     [16]     		rr 		l
0350: CB2C     [24]     		sra 	h
0352: CB1D     [32]     		rr 		l
0354: CB2C     [40]     		sra 	h
0356: CB1D     [48]     		rr 		l
0358:                   M8_C_8_c47__end:
                        
0358:                   M8_C_16_c47_:
0358: CB2C     [ 8]     		sra 	h
035A: CB1D     [16]     		rr 		l
035C: CB2C     [24]     		sra 	h
035E: CB1D     [32]     		rr 		l
0360: CB2C     [40]     		sra 	h
0362: CB1D     [48]     		rr 		l
0364: CB2C     [56]     		sra 	h
0366: CB1D     [64]     		rr 		l
0368:                   M8_C_16_c47__end:
                        
0368:                   M8_M_256_c47_:
0368: 6C       [ 4]     		ld 		l,h
0369: 2600     [11]     		ld 		h,0
036B:                   M8_M_256_c47__end:
                        
                        ; ***************************************************************************************
                        
036B:                   M8_C_abs:
036B: CB7C     [ 8]     		bit 	7,h
036D: C8       [13|19]  		ret		z
036E: C31B03   [23]     		jp 		__negate
0371:                   M8_C_abs_end:
                        
                        ; ***************************************************************************************
                        
0371:                   M8_M_bswap:
0371: 7D       [ 4]     		ld 		a,l
0372: 6C       [ 8]     		ld 		l,h
0373: 67       [12]     		ld 		h,a
0374:                   M8_M_bswap_end:
                        
                        ; ***************************************************************************************
                        
0374:                   M8_C_not:
0374: 7C       [ 4]     		ld 		a,h
0375: 2F       [ 8]     		cpl
0376: 67       [12]     		ld 		h,a
0377: 7D       [16]     		ld 		a,l
0378: 2F       [20]     		cpl
0379: 6F       [24]     		ld 		l,a
037A: C9       [34]     		ret
037B:                   M8_C_not_end:
                        
                        ; ***************************************************************************************
                        
037B:                   M8_C_strlen:
037B: D5       [11]     		push 	de
037C: EB       [15]     		ex 		de,hl
037D: 210000   [25]     		ld 		hl,0
0380:                   _SLNLoop:
0380: 1A       [ 7]     		ld 		a,(de)
0381: B7       [11]     		or 		a
0382: 2804     [18|23]  		jr 		z,_SLNExit
0384: 13       [24]     		inc 	de
0385: 23       [30]     		inc 	hl
0386: 18F8     [42]     		jr 		_SLNLoop
0388:                   _SLNExit:
0388: D1       [10]     		pop 	de
0389: C9       [20]     		ret
038A:                   M8_C_strlen_end:
                        
                        ; ***************************************************************************************
                        
038A:                   M8_C_random:
038A: EB       [ 4]     	ex 		de,hl
038B: C5       [15]     	push 	bc
038C: 2AA703   [31]         ld 		hl,(_randomSeed1)
038F: 44       [35]         ld 		b,h
0390: 4D       [39]         ld 		c,l
0391: 29       [50]         add 	hl,hl
0392: 29       [61]         add 	hl,hl
0393: 2C       [65]         inc 	l
0394: 09       [76]         add 	hl,bc
0395: 22A703   [92]         ld 		(_randomSeed1),hl
0398: 2AA903   [108]        ld 		hl,(_randomSeed2)
039B: 29       [119]        add 	hl,hl
039C: 9F       [123]        sbc 	a,a
039D: E62D     [130]        and 	%00101101
039F: AD       [134]        xor 	l
03A0: 6F       [138]        ld 		l,a
03A1: 22A903   [154]        ld 		(_randomSeed2),hl
03A4: 09       [165]        add 	hl,bc
03A5: C1       [175]        pop 	bc
03A6: C9       [185]        ret
                        
03A7:                   _randomSeed1:
03A7: CDAB              	.dw 	$ABCD
03A9:                   _randomSeed2:
03A9: B9FD              	.dw 	$FDB9


; +++ segments +++

#CODE          = $0202 =   514,  size = $01A9 =   425

; +++ global symbols +++

DIVDivideMod16     = $0253 =   595          _runtime.asm:145
Div16_Loop1        = $025D =   605          _runtime.asm:153
Div16_Loop2        = $026E =   622          _runtime.asm:167
Div16_NoAdd1       = $0265 =   613          _runtime.asm:159
Div16_NoAdd2       = $0276 =   630          _runtime.asm:173
M8_C_0_c45_        = $031B =   795          _runtime.asm:553 (unused)
M8_C_0_c45__end    = $0323 =   803          _runtime.asm:563 (unused)
M8_C_0_c60_        = $0323 =   803          _runtime.asm:567 (unused)
M8_C_0_c60__end    = $032B =   811          _runtime.asm:573 (unused)
M8_C_0_c61_        = $032B =   811          _runtime.asm:577 (unused)
M8_C_0_c61__end    = $0333 =   819          _runtime.asm:584 (unused)
M8_C_16_c47_       = $0358 =   856          _runtime.asm:638 (unused)
M8_C_16_c47__end   = $0368 =   872          _runtime.asm:647 (unused)
M8_C_8_c47_        = $034C =   844          _runtime.asm:629 (unused)
M8_C_8_c47__end    = $0358 =   856          _runtime.asm:636 (unused)
M8_C__c42_         = $02D8 =   728          _runtime.asm:357 (unused)
M8_C__c42__end     = $02DB =   731          _runtime.asm:359 (unused)
M8_C__c43__c33_    = $0286 =   646          _runtime.asm:212 (unused)
M8_C__c43__c33__end = $028F =   655          _runtime.asm:222 (unused)
M8_C__c45_         = $0229 =   553          _runtime.asm:57 (unused)
M8_C__c45__end     = $0230 =   560          _runtime.asm:64 (unused)
M8_C__c47_         = $0246 =   582          _runtime.asm:122 (unused)
M8_C__c47__end     = $024D =   589          _runtime.asm:128 (unused)
M8_C__c60_         = $0208 =   520          _runtime.asm:19 (unused)
M8_C__c60__end     = $021D =   541          _runtime.asm:38 (unused)
M8_C__c61_         = $021D =   541          _runtime.asm:42 (unused)
M8_C__c61__end     = $0229 =   553          _runtime.asm:53 (unused)
M8_C_abs           = $036B =   875          _runtime.asm:656 (unused)
M8_C_abs_end       = $0371 =   881          _runtime.asm:660 (unused)
M8_C_and           = $0231 =   561          _runtime.asm:74 (unused)
M8_C_and_end       = $0238 =   568          _runtime.asm:82 (unused)
M8_C_boot          = $0202 =   514          _runtime.asm:2 (unused)
M8_C_copy          = $02A6 =   678          _runtime.asm:275 (unused)
M8_C_copy_end      = $02C3 =   707          _runtime.asm:306 (unused)
M8_C_fill          = $02C3 =   707          _runtime.asm:310 (unused)
M8_C_fill_end      = $02D3 =   723          _runtime.asm:328 (unused)
M8_C_halt          = $02D3 =   723          _runtime.asm:332 (unused)
M8_C_halt_end      = $02D7 =   727          _runtime.asm:337 (unused)
M8_C_mod           = $024D =   589          _runtime.asm:132 (unused)
M8_C_mod_end       = $0253 =   595          _runtime.asm:137 (unused)
M8_C_not           = $0374 =   884          _runtime.asm:672 (unused)
M8_C_not_end       = $037B =   891          _runtime.asm:680 (unused)
M8_C_or            = $0238 =   568          _runtime.asm:86 (unused)
M8_C_or_end        = $023F =   575          _runtime.asm:94 (unused)
M8_C_p_c33_        = $029C =   668          _runtime.asm:251 (unused)
M8_C_p_c33__end    = $02A6 =   678          _runtime.asm:261 (unused)
M8_C_p_c64_        = $0293 =   659          _runtime.asm:239 (unused)
M8_C_p_c64__end    = $029C =   668          _runtime.asm:247 (unused)
M8_C_random        = $038A =   906          _runtime.asm:702 (unused)
M8_C_strlen        = $037B =   891          _runtime.asm:684 (unused)
M8_C_strlen_end    = $038A =   906          _runtime.asm:698 (unused)
M8_C_xor           = $023F =   575          _runtime.asm:98 (unused)
M8_C_xor_end       = $0246 =   582          _runtime.asm:106 (unused)
M8_M_16_c42_       = $0339 =   825          _runtime.asm:603 (unused)
M8_M_16_c42__end   = $033D =   829          _runtime.asm:608 (unused)
M8_M_256_c42_      = $033D =   829          _runtime.asm:610 (unused)
M8_M_256_c42__end  = $0340 =   832          _runtime.asm:613 (unused)
M8_M_256_c47_      = $0368 =   872          _runtime.asm:649 (unused)
M8_M_256_c47__end  = $036B =   875          _runtime.asm:652 (unused)
M8_M_2_c42_        = $0333 =   819          _runtime.asm:588 (unused)
M8_M_2_c42__end    = $0334 =   820          _runtime.asm:590 (unused)
M8_M_2_c47_        = $0340 =   832          _runtime.asm:617 (unused)
M8_M_2_c47__end    = $0344 =   836          _runtime.asm:620 (unused)
M8_M_4_c42_        = $0334 =   820          _runtime.asm:592 (unused)
M8_M_4_c42__end    = $0336 =   822          _runtime.asm:595 (unused)
M8_M_4_c47_        = $0344 =   836          _runtime.asm:622 (unused)
M8_M_4_c47__end    = $034C =   844          _runtime.asm:627 (unused)
M8_M_8_c42_        = $0336 =   822          _runtime.asm:597 (unused)
M8_M_8_c42__end    = $0339 =   825          _runtime.asm:601 (unused)
M8_M__c33_         = $027E =   638          _runtime.asm:194 (unused)
M8_M__c33__end     = $0282 =   642          _runtime.asm:199 (unused)
M8_M__c43_         = $0230 =   560          _runtime.asm:68 (unused)
M8_M__c43__c43_    = $0318 =   792          _runtime.asm:540 (unused)
M8_M__c43__c43__c43_ = $0319 =   793          _runtime.asm:546 (unused)
M8_M__c43__c43__c43__end = $031B =   795          _runtime.asm:549 (unused)
M8_M__c43__c43__end = $0319 =   793          _runtime.asm:542 (unused)
M8_M__c43__end     = $0231 =   561          _runtime.asm:70 (unused)
M8_M__c45__c45_    = $0317 =   791          _runtime.asm:534 (unused)
M8_M__c45__c45__c45_ = $0315 =   789          _runtime.asm:527 (unused)
M8_M__c45__c45__c45__end = $0317 =   791          _runtime.asm:530 (unused)
M8_M__c45__c45__end = $0318 =   792          _runtime.asm:536 (unused)
M8_M__c64_         = $0282 =   642          _runtime.asm:203 (unused)
M8_M__c64__end     = $0286 =   646          _runtime.asm:208 (unused)
M8_M_a_c62_b       = $02F6 =   758          _runtime.asm:406 (unused)
M8_M_a_c62_b_end   = $02F8 =   760          _runtime.asm:409 (unused)
M8_M_a_c62_c       = $02F8 =   760          _runtime.asm:411 (unused)
M8_M_a_c62_c_end   = $02FA =   762          _runtime.asm:414 (unused)
M8_M_a_c62_r       = $0305 =   773          _runtime.asm:462 (unused)
M8_M_a_c62_r_end   = $0306 =   774          _runtime.asm:464 (unused)
M8_M_ab_c62_r      = $030B =   779          _runtime.asm:493 (unused)
M8_M_ab_c62_r_end  = $030D =   781          _runtime.asm:496 (unused)
M8_M_abc_c62_r     = $030F =   783          _runtime.asm:505 (unused)
M8_M_abc_c62_r_end = $0312 =   786          _runtime.asm:509 (unused)
M8_M_b_c62_a       = $02FA =   762          _runtime.asm:418 (unused)
M8_M_b_c62_a_end   = $02FC =   764          _runtime.asm:421 (unused)
M8_M_b_c62_c       = $02FC =   764          _runtime.asm:423 (unused)
M8_M_b_c62_c_end   = $02FE =   766          _runtime.asm:426 (unused)
M8_M_b_c62_r       = $0307 =   775          _runtime.asm:472 (unused)
M8_M_b_c62_r_end   = $0308 =   776          _runtime.asm:474 (unused)
M8_M_break         = $02D7 =   727          _runtime.asm:341 (unused)
M8_M_break_end     = $02D8 =   728          _runtime.asm:343 (unused)
M8_M_bswap         = $0371 =   881          _runtime.asm:664 (unused)
M8_M_bswap_end     = $0374 =   884          _runtime.asm:668 (unused)
M8_M_c_c33_        = $028F =   655          _runtime.asm:226 (unused)
M8_M_c_c33__end    = $0290 =   656          _runtime.asm:228 (unused)
M8_M_c_c62_a       = $02FE =   766          _runtime.asm:430 (unused)
M8_M_c_c62_a_end   = $0300 =   768          _runtime.asm:433 (unused)
M8_M_c_c62_b       = $0300 =   768          _runtime.asm:435 (unused)
M8_M_c_c62_b_end   = $0302 =   770          _runtime.asm:438 (unused)
M8_M_c_c62_r       = $0309 =   777          _runtime.asm:482 (unused)
M8_M_c_c62_r_end   = $030A =   778          _runtime.asm:484 (unused)
M8_M_c_c64_        = $0290 =   656          _runtime.asm:232 (unused)
M8_M_c_c64__end    = $0293 =   659          _runtime.asm:235 (unused)
M8_M_pop           = $0303 =   771          _runtime.asm:455 (unused)
M8_M_pop_end       = $0305 =   773          _runtime.asm:458 (unused)
M8_M_push          = $0302 =   770          _runtime.asm:451 (unused)
M8_M_push_end      = $0303 =   771          _runtime.asm:453 (unused)
M8_M_r_c62_a       = $0306 =   774          _runtime.asm:466 (unused)
M8_M_r_c62_a_end   = $0307 =   775          _runtime.asm:468 (unused)
M8_M_r_c62_ab      = $030D =   781          _runtime.asm:498 (unused)
M8_M_r_c62_ab_end  = $030F =   783          _runtime.asm:501 (unused)
M8_M_r_c62_abc     = $0312 =   786          _runtime.asm:511 (unused)
M8_M_r_c62_abc_end = $0315 =   789          _runtime.asm:515 (unused)
M8_M_r_c62_b       = $0308 =   776          _runtime.asm:476 (unused)
M8_M_r_c62_b_end   = $0309 =   777          _runtime.asm:478 (unused)
M8_M_r_c62_c       = $030A =   778          _runtime.asm:486 (unused)
M8_M_r_c62_c_end   = $030B =   779          _runtime.asm:488 (unused)
M8_M_swap          = $02F5 =   757          _runtime.asm:400 (unused)
M8_M_swap_end      = $02F6 =   758          _runtime.asm:402 (unused)
MULTMultiply16     = $02DB =   731          _runtime.asm:367
_SLNExit           = $0388 =   904          _runtime.asm:695
_SLNLoop           = $0380 =   896          _runtime.asm:688
__Core__Mult_Loop  = $02E2 =   738          _runtime.asm:373
__Core__Mult_Shift = $02E7 =   743          _runtime.asm:377
__copy_exit        = $02BF =   703          _runtime.asm:301
__copy_gt_count    = $02BC =   700          _runtime.asm:298
__fill_loop        = $02C8 =   712          _runtime.asm:317
__halt_loop        = $02D3 =   723          _runtime.asm:333
__less_returnc     = $0216 =   534          _runtime.asm:32
__less_samesign    = $0211 =   529          _runtime.asm:27
__negate           = $031B =   795          _runtime.asm:554
_end               = $03AB =   939          :1 (unused)
_randomSeed1       = $03A7 =   935          _runtime.asm:724
_randomSeed2       = $03A9 =   937          _runtime.asm:726
_size              = $01A9 =   425          :1 (unused)


total time: 0.0047 sec.
no errors
