              	; --------------------------------------
              	; zasm: assemble "_test.asm"
              	; date: 2021-11-02 15:59:40
              	; --------------------------------------


              	
0202:         			org 	$202
              	
              	;
              	;	 	Defining SPRLowSprite sets the lowest UDG used by sprites. This is a constant
              	; 		so if this is $A0, then $00-$9F are background, and $A0-$FF are used for sprites.
              	;
0202: C30009  			jp 		start
              			.include "xsprite.asm"
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;		Name:		xsprite.asm
              	;		Purpose:	XOR Sprite Drawer
              	;		Created:	29th October 2021
              	;		Author:		Paul Robson (paul@robsons.org.uk)
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	
              	; *********************************************************************************************
              	;
              	;		This is an XOR drawing sprite system. This is useful because the draw is self
              	;		cancelling, and this means you don't have to repaint multiple sprites to restore
              	; 		the display state. The downside is that it doesn't work well on collisions or 
              	; 		especially backgrounds.
              	;
              	;		The original design, which was a simpler draw all/erase all design, was binned 
              	;		because I thought on real hardware it would create too much flash on the display.
              	;
              	;		I don't yet have a real machine so can't evaluate this in practice, as the emulator
              	; 		snapshots the display at 60Mhz, so the effects of endlessly messing with the 
              	;		CRAM and VRAM is largely hidden.
              	;
              	;		At 4Mhz it does about 330 draws/erases a second on a 16x16 sprites, twice as fast on
              	;		8 pixel high sprites.
              	;
              	;		It eats UDGs - a single 16x16 sprite needs 9 UDGs if it doesn't overlap with another.
              	;
              	; *********************************************************************************************
              	;
              	;		How it works. 
              	;
              	;			When drawing a sprite, it will try to allocate UDGs from its pool for the space
              	; 			to draw the sprite. When drawing or erasing it then XORs the bit patterns into this
              	; 			as far as it can. When erased, UDGs are returned to the pool if no longer required.
              	;
              	; *********************************************************************************************
              	;
              	;		Offsets from IX.
              	;
              	;			+0,+1 		Horizontal position (0..319)
              	;			+2,+3 		Vertical position (0..239)
              	;			+4,+5 		Pointer to graphic image data.
              	;							Width : 8  	one byte per row
              	;							Width : 16 	two bytes per row left-right order
              	;			+6 			Control
              	;							Bit 7: 		Set if sprite disabled
              	;							Bit 6: 		Vertical flip
              	;							Bit 5:		Horizontal flip
              	;							Bit 4..2:	0
              	;							Bit 1:		Double width
              	;							Bit 0: 		Double height
              	;			+7 			Status
              	;							Bit 7:		Set when drawn on screen
              	;							Bit 6..0:	0
              	;
              	;			Changes should only be made when the sprite is not drawn, otherwise chaos
              	;			will ensue.
              	;
              	;			Draws will not fail, however, they may not visually work either. If there are more
              	;			UDGs required than available graphics will not be drawn, or possibly drawn
              	;			erratically. It is advised to minimise the number of sprites both for CPU time
              	;			and UDG usage. 
              	;
              	;			Use specific UDGs for static/slow objects. For (say) Pacman the only sprites should
              	;			be the player character and chasing ghosts.
              	;
              	; *********************************************************************************************
              	;
              	;								  Sprite Record entries
              	;
              	; *********************************************************************************************
              	
0000:         	SPRx 	= 0 								; horizontal position, pixels
0002:         	SPRy 	= 2 								; vertical position, pixels
0004:         	SPRgraphics = 4 							; bitmap data
0006:         	SPRcontrol = 6 								; 0:width 1:height 5:HFlip 6:VFlip 7:hidden
              												; (others are zero)
0007:         	SPRstatus = 7 								; 7:currently drawn
              	
              	; *********************************************************************************************
              	;
              	; 								Initialise the sprite system.
              	;
              	; 	At this point sprite records should all have their "currently drawn" bit clear, it will
              	; 	get very confused otherwise.
              	;
              	; *********************************************************************************************
              	
0205:         	SPRInitialise:
0205: F5      			push 	af
0206: E5      			push 	hl
              			;
              			; 		Clear the main data area.
              			;
0207: 210005  			ld 		hl,SPRDataBlock 			
020A:         	_SPRZeroBlock:
020A: 3600    			ld 		(hl),$00
020C: 23      			inc 	hl
020D: 7C      			ld 		a,h
020E: FE09    			cp 		SPRDataBlockEnd >> 8
0210: 20F8    			jr 		nz,_SPRZeroBlock
              			;
              			; 		Set all possible original characters to $FF, indicating they are available.
              			;		
0212: 3A9404  			ld 		a,(_SPRFirstUDGSprite)
0215: 6F      			ld 		l,a
0216: 2605    			ld 		h,SPROriginalChar >> 8
0218:         	_SPRUsageReset:			 					
0218: 36FF    			ld 		(hl),$FF
021A: 2C      			inc 	l
021B: 20FB    			jr 		nz,_SPRUsageReset
021D: E1      			pop 	hl
021E: F1      			pop 	af
021F: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	;						Draw, or Erase, the sprite whose raw data is at IX
              	;
              	; *********************************************************************************************
              	
0220:         	SpriteXDraw: 								; draw only
0220: DDCB077E			bit 	7,(ix+SPRstatus)
0224: C0      			ret 	nz
0225: 1805    			jr 		SpriteXToggle
0227:         	SpriteXErase:								; erase only
0227: DDCB077E			bit 	7,(ix+SPRstatus)
022B: C8      			ret 	z
022C:         	SpriteXToggle:								; flip state
022C: F5      			push 	af 							; save registers 							
022D: C5      			push 	bc
022E: D5      			push 	de
022F: E5      			push 	hl
0230: FDE5    			push 	iy
              			;
              			; 		Check actually visible
              			;
0232: DDCB067E			bit 	7,(ix+SPRcontrol)
0236: C26703  			jp 		nz,_SPRExit
              			;
              			; 		Check range.
              			;
0239: DD7E01  			ld 		a,(ix+SPRx+1) 				; MSB of X must be 0 or 1
023C: 47      			ld 		b,a 						; save in B
023D: E6FE    			and 	$FE
023F: DDB603  			or 		a,(ix+SPRy+1) 				; MSB of Y must be zero.
0242: 2011    			jr 		nz,_SPRRangeFail
              			;
0244: DD7E02  			ld 		a,(ix+SPRy) 				; check Y < 240
0247: FEF0    			cp 		8*30
0249: 300A    			jr 		nc,_SPRRangeFail
              			;
024B: 05      			dec 	b 							; if MSB X was 1, now zero
024C: 200A    			jr 		nz,_SPRCalcPosition 
              			;
024E: DD7E00  			ld 		a,(ix+SPRx) 				; X.MSB was 1, so must be X.LSB < 64
0251: FE40    			cp 		64
0253: 3803    			jr 		c,_SPRCalcPosition
0255:         	_SPRRangeFail:
0255: C36703  			jp 		_SPRExit 	
              			;
              			;		Calculate position in IY
              			;
0258:         	_SPRCalcPosition:		
0258: 2600    			ld 		h,0							; Y position in HL, with lower 3 bits masked, so already x 8
025A: DD7E02  			ld 		a,(ix+SPRy)
025D: E6F8    			and 	$F8
025F: 6F      			ld 		l,a
0260: 54      			ld 		d,h 						; DE = Y x 8
0261: 5D      			ld 		e,l
0262: 29      			add 	hl,hl 						; HL = Y x 32
0263: 29      			add 	hl,hl
0264: 19      			add 	hl,de 						; HL = Y x 40
0265: FD2100F8			ld 		iy,$F800 					; IY = $F800 + Y x 40
0269: EB      			ex 		de,hl
026A: FD19    			add 	iy,de
              	
026C: DD5E00  			ld 		e,(ix+SPRx)					; DE = X position
026F: DD5601  			ld 		d,(ix+SPRx+1)
0272: CB3A    			srl 	d 							; / 8 (after first in range 0-255 hence SRL E)
0274: CB1B    			rr 		e
0276: CB3B    			srl 	e
0278: CB3B    			srl 	e
027A: 1600    			ld 		d,0 						; add to screen position.
027C: FD19    			add 	iy,de
              			;
              			; 		Calculate and patch the fine horizontal shift jump which adjusts the 
              			; 		number of 24 bit left shifts we do to the graphics data.
              			;
027E: DD7E00  			ld 		a,(ix+SPRx)
0281: E607    			and 	7
0283: 87      			add 	a,a
0284: 321003  			ld 		(_SPRFineHorizontalShift+1),a 
              			;
              			; 		Calculate the horizontal offset which makes it start drawing part way through a UDG
              			;
0287: DD7E02  			ld 		a,(ix+SPRy)
028A: E607    			and 	7
028C: 329104  			ld 		(_SPRInitialYOffset),a
              			;
              			; 		Calculate the row count from bit 1 of the control byte
              			; 		(the number of vertical pixels down)
              			;
028F: 3E08    			ld 		a,8
0291: DDCB064E			bit 	1,(ix+SPRcontrol)
0295: 2801    			jr 		z,_SPRSingleHeight
0297: 87      			add 	a,a
0298:         	_SPRSingleHeight:		
0298: 329004  			ld 		(_SPRRowCount),a
              			;
              			;		Set the sprite graphic address and incrementer.
              			;
029B: DD6E04  			ld 		l,(ix+SPRgraphics) 			; data address
029E: DD6605  			ld 		h,(ix+SPRgraphics+1) 		
02A1: 110100  			ld 		de,1 						; increment/decrement
02A4: DDCB0646			bit 	0,(ix+SPRcontrol)
02A8: 2801    			jr 		z,_SPRSGANotDoubleWidth
02AA: 13      			inc 	de 							; 2 if double width
02AB:         	_SPRSGANotDoubleWidth:
02AB: DDCB0676			bit 	6,(ix+SPRcontrol) 			; check for vertical flip.
02AF: 2818    			jr 		z,_SPRSGANotVFlip
              			;
02B1: EB      			ex 		de,hl 						; DE = address, HL = increment x 8
02B2: E5      			push 	hl
02B3: 29      			add 	hl,hl
02B4: 29      			add 	hl,hl
02B5: 29      			add 	hl,hl
02B6: DDCB064E			bit 	1,(ix+SPRcontrol) 			; x 16 if double height
02BA: 2801    			jr 		z,_SPRSGANotDoubleHeight
02BC: 29      			add 	hl,hl		
02BD:         	_SPRSGANotDoubleHeight:
02BD: 19      			add 	hl,de 						; add 8/16 x increment to start
02BE: C1      			pop 	bc 							; original increment -> BC
02BF: E5      			push 	hl 							; save new start on stack.
02C0: 210000  			ld 		hl,0 						; HL = - increment
02C3: AF      			xor 	a
02C4: ED42    			sbc 	hl,bc
02C6: D1      			pop 	de 							; DE = new start off stack
02C7: EB      			ex 		de,hl 						; swap them back so HL = address, DE = -increment
02C8: 19      			add 	hl,de 						; points HL to the last sprite entry.
02C9:         	_SPRSGANotVFlip:
02C9: 22EE02  			ld 		(_SPRFetchGraphicPtr+1),hl 	; write out start address in HL and incrementer in DE.		
02CC: ED53FE02			ld 		(_SPRAdjustGraphicPtr+1),de
              			;
              			; 		Try to allocate UDGs for the current row at IY, 2 or 3 UDGs.
              			;
02D0:         	_SPRStartNextCharacterRow:
02D0: CD7603  			call 	_SPRAllocateRow 			; try to allocate the whole row.
02D3: DA6703  			jp 		c,_SPRExit					; it didn't work, so we abandon drawing here.
              			;
              			; 		Adjust the usage counters.
              			;
02D6: FDE5    			push 	iy
02D8: CD2E04  			call 	SPRAdjustUsageCounter
02DB: FD23    			inc 	iy
02DD: CD2E04  			call 	SPRAdjustUsageCounter
02E0: DDCB0646			bit 	0,(ix+SPRcontrol)
02E4: 2805    			jr 		z,_SPRAuNotRight
02E6: FD23    			inc 	iy
02E8: CD2E04  			call 	SPRAdjustUsageCounter
02EB:         	_SPRAuNotRight:
02EB: FDE1    			pop 	iy		
              			;
              			;		Get the graphics for the next *pixel* line. into ADE
              			;
02ED:         	_SPRNextRowUDG:		
              			;
02ED:         	_SPRFetchGraphicPtr:
02ED: 210000  			ld 		hl,$0000
02F0: 1E00    			ld 		e,0							; DE = $00:(HL)
02F2: 56      			ld 		d,(hl)
02F3: DDCB0646			bit 	0,(ix+SPRcontrol) 			; is the width 1 ?
02F7: 2804    			jr 		z,_SPRHaveGraphicData
02F9: 23      			inc 	hl
02FA: 5A      			ld 		e,d  						; DE = (HL+1):(HL)		
02FB: 56      			ld 		d,(hl)
02FC: 2B      			dec 	hl		
02FD:         	_SPRHaveGraphicData:		
              			;
02FD:         	_SPRAdjustGraphicPtr:
02FD: 010000  			ld 		bc,$0000 					; this is changed to account for size and
0300: 09      			add 	hl,bc 						; direction.
0301: 22EE02  			ld 		(_SPRFetchGraphicPtr+1),hl		
              			;
              			; 		Check for Horizontal Flip
              			;
0304: DDCB066E			bit 	5,(ix+SPRcontrol)			; if HFlip bit set
0308: 2803    			jr 		z,_SPRNoHFlip
030A: CD4A04  			call 	SPRFlipDE 					; Flip DE
030D:         	_SPRNoHFlip:		
030D: AF      			xor 	a 							; ADE contains 24 bit graphic data.
030E: EB      			ex 		de,hl 						; we put it in AHL
030F:         	_SPRFineHorizontalShift:		
030F: 1800    			jr 		$+2 						; this is altered to do the fine horizontal shift
0311: 29      			add 	hl,hl
0312: 8F      			adc 	a,a
0313: 29      			add 	hl,hl
0314: 8F      			adc 	a,a
0315: 29      			add 	hl,hl
0316: 8F      			adc 	a,a
0317: 29      			add 	hl,hl
0318: 8F      			adc 	a,a
0319: 29      			add 	hl,hl
031A: 8F      			adc 	a,a
031B: 29      			add 	hl,hl
031C: 8F      			adc 	a,a
031D: 29      			add 	hl,hl
031E: 8F      			adc 	a,a
031F: 29      			add 	hl,hl
0320: 8F      			adc 	a,a
0321: EB      			ex 		de,hl 						; put it back in ADE
              			;
              			;		Now XOR the data with the previously calculated addresses. 
              			;		If (ix+5)[0] is clear then don't do the third one, it's an 8x8 sprite
              			;
              			;		These addresses (the ld hl,xxxx ones) are modified in situ.
              			;
0322:         	_SPRLeftUDGPosition:		
0322: 2108F6  			ld 		hl,$F000+$C1*8
0325: AE      			xor 	(hl)
0326: 77      			ld 		(hl),a
0327:         	_SPRMiddleUDGPosition:		
0327: 2110F6  			ld 		hl,$F000+$C2*8
032A: 7A      			ld 		a,d
032B: AE      			xor 	(hl)
032C: 77      			ld 		(hl),a
032D: DDCB0646			bit 	0,(ix+SPRcontrol) 					; if width 1, skip the last draw
0331: 2806    			jr 		z,_SPRDrawEnd
0333:         	_SPRRightUDGPosition:		
0333: 2118F6  			ld 		hl,$F000+$C3*8
0336: 7B      			ld 		a,e
0337: AE      			xor 	(hl)
0338: 77      			ld 		(hl),a
0339:         	_SPRDrawEnd:
              			;
              			; 		Check if we have done all the rows
              			;
0339: 219004  			ld 		hl,_SPRRowCount 
033C: 35      			dec 	(hl)
033D: 2828    			jr 		z,_SPRExit
              			;
              			; 		Now go to the next line down. Initially this just advances the vertical offset
              			;		in the UDG pointers
              			;
033F: 212803  			ld 		hl,_SPRMiddleUDGPosition+1
0342: 34      			inc 	(hl)
0343: 213403  			ld 		hl,_SPRRightUDGPosition+1 	; not guaranteed initialised.
0346: 34      			inc 	(hl)
0347: 212303  			ld 		hl,_SPRLeftUDGPosition+1
034A: 34      			inc 	(hl)
              			;
034B: 7E      			ld 		a,(hl) 						; check crossed 8 byte boundary
034C: E607    			and 	7
034E: 209D    			jr 		nz,_SPRNextRowUDG 			; if not complete it.
              	
0350: AF      			xor 	a 							; clear the initial offset
0351: 329104  			ld 		(_SPRInitialYOffset),a
              	
              	
0354: 112800  			ld 		de,40 						; advance down one row.
0357: FD19    			add 	iy,de 
              	
0359: 11B0FC  			ld 		de,$F800+40*30 				; the end of the physical display
035C: FDE5    			push 	iy
035E: E1      			pop 	hl
035F: 37      			scf
0360: ED52    			sbc 	hl,de
0362: 3003    			jr 		nc,_SPRExit 				; past the bottom,exit.
              	
0364: C3D002  			jp 		_SPRStartNextCharacterRow 	; do the next character row.
              	
0367:         	_SPRExit:
0367: DD7E07  			ld 		a,(ix+SPRstatus) 			; toggle the drawn status bit
036A: EE80    			xor 	$80
036C: DD7707  			ld 		(ix+SPRstatus),a 		
              	
036F: FDE1    			pop 	iy 							; restore registers
0371: E1      			pop 	hl
0372: D1      			pop 	de
0373: C1      			pop 	bc
0374: F1      			pop 	af
0375: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	;		Allocate 0-3 UDGs to the character space according to need and availability.
              	; 		Fail with CS if can't.
              	;		If possible,
              	;			all new UDGs should have the copied graphic from the background and the
              	;			old background set up.
              	;			the UDGs should replace the graphics in IY.
              	;
              	; *********************************************************************************************
              	
0376:         	_SPRAllocateRow:
0376: C5      			push 	bc 							; save BC.
0377: FDE5    			push 	iy 							; save IY
0379: ED739204			ld 		(_SPRAllocSPTemp),sp		; save SP as we are using it for temp.
              	
037D: DDCB077E			bit 	7,(ix+SPRstatus) 			; are we erasing ?
0381: 280A    			jr 		z,_SPRARNotErasing
              	
0383: 3A9404  			ld 		a,(_SPRFirstUDGSprite)		; B = first sprite useable
0386: 47      			ld 		b,a
0387: FD7E00  			ld 		a,(iy+0) 					; if erasing, check if row is drawn on UDGs
038A: B8      			cp 		b
038B: 384C    			jr 		c,_SPRAllocateExit 			; and if so don't allocate the row, exit.
              	
038D:         	_SPRARNotErasing:		
038D: 210000  			ld 		hl,$0000 					; we save all the allocated so far on the stack
0390: E5      			push 	hl 		 					; this is the end marker.					
              			;
              			; 		Do 2 or 3. For each overwrite the XOR code addresses and save
              			;		it on the stack. If it fails, then unwind everything.
              			;
0391: CDE103  			call 	_SPRAllocateOne 			; do (IY)
0394: 3821    			jr 		c,_SPRAllocateUndo 			; if done, then Undo.
0396: 222303  			ld 		(_SPRLeftUDGPosition+1),hl 	; overwrite the code.
0399: E5      			push 	hl
              	
039A: FD23    			inc 	iy		
039C: CDE103  			call 	_SPRAllocateOne 			; do (IY+1)
039F: 3816    			jr 		c,_SPRAllocateUndo 			; if done, then Undo.
03A1: 222803  			ld 		(_SPRMiddleUDGPosition+1),hl ; overwrite the code.
03A4: E5      			push 	hl
              	
03A5: DDCB0646			bit 	0,(ix+SPRcontrol) 			; if 8 width then we are done.
03A9: 282D    			jr 		z,_SPRAllocateOkay 
              	
03AB: FD23    			inc 	iy		
03AD: CDE103  			call 	_SPRAllocateOne 			; do (IY+2)
03B0: 3805    			jr 		c,_SPRAllocateUndo 			; if done, then Undo.
03B2: 223403  			ld 		(_SPRRightUDGPosition+1),hl ; overwrite the code.
03B5: 1821    			jr 		_SPRAllocateOkay 
              			;
              			; 		Failed, so pop the saved UDG addresses on the stack and reset
              			;	 	as if we hadn't allocated it. We haven't bumped the usage count yet.
              			;
03B7:         	_SPRAllocateUndo:
03B7: D1      			pop 	de 							; address of UDG into DE
03B8: 7A      			ld 		a,d 						; have we done the whole lot ?
03B9: B3      			or 		e
03BA: 37      			scf
03BB: 281C    			jr 		z,_SPRAllocateExit 			; if so, e.g. popped $0000 with carry set.
              	
03BD: CB3A    			srl 	d 							; divide by 8 - will put the UDG number into E
03BF: CB1B    			rr 		e
03C1: CB3A    			srl 	d
03C3: CB1B    			rr 		e
03C5: CB3A    			srl 	d
03C7: CB1B    			rr 		e
              			;
03C9: 6B      			ld 		l,e 						; HL is the address of the original character for this UDG.
03CA: 2605    			ld 		h,SPROriginalChar >> 8 		
03CC: 7E      			ld 		a,(hl) 						; character the UDG replaced
03CD: 36FF    			ld 		(hl),$FF 					; mark that UDG as now available
              	
03CF: 2607    			ld 		h,SPRLowAddress >> 8 		; get screen address into DE
03D1: 5E      			ld 		e,(hl)
03D2: 2608    			ld 		h,SPRHighAddress >> 8 
03D4: 56      			ld 		d,(hl)
              	
03D5: 12      			ld 		(de),a 						; fix up screen
              	
03D6: 18DF    			jr 		_SPRAllocateUndo 			; and see if there are any more to undo
              			;
              			; 		Worked, exit with carry clear.
              			;
03D8:         	_SPRAllocateOkay: 							; clear carry flag and exit.
03D8: AF      			xor 	a		
03D9:         	_SPRAllocateExit:
03D9: ED7B9204			ld 		sp,(_SPRAllocSPTemp)		; get SP back
03DD: FDE1    			pop 	iy 							; restore BC IY
03DF: C1      			pop 	bc				
03E0: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	; 		Allocate a single UDG sprite, overwriting (IY), saving the original and copying
              	; 		the definition. On exit HL points to its graphic definition.
              	;
              	; *********************************************************************************************
              	
03E1:         	_SPRAllocateOne:
03E1: 3A9404  			ld 		a,(_SPRFirstUDGSprite)		; L = first sprite UDG
03E4: 6F      			ld 		l,a
03E5: FD7E00  			ld 		a,(iy+0) 					; is it a UDG already
03E8: BD      			cp 		l 							; if so, we don't need to do anything.
03E9: 3032    			jr 		nc,_SPRAllocateOneExit
              			;
              			; 		Look for a free UDG, e.g. one where the stored character is $FF.
              			;
03EB: 2605    			ld 		h,SPROriginalChar >> 8
03ED:         	_SPRAOFind: 								; look for an available UDG.
03ED: 7E      			ld 		a,(hl)
03EE: FEFF    			cp 		$FF
03F0: 2805    			jr 		z,_SPRAOFound
03F2: 2C      			inc 	l
03F3: 20F8    			jr 		nz,_SPRAOFind		
03F5: 37      			scf 								; nope, we just can't do this one.
03F6: C9      			ret
              	;
              	;  		Found a sprite we can allocate
              	;
03F7:         	_SPRAOFound:
              			;
              			; 		Store the character overwritten by the UDG
              			;
03F7: FD7E00  			ld 		a,(iy+0) 					; this is the original character e.g. what is underneath
03FA: 77      			ld 		(hl),a 						; put in storage slot for original character
              			;
03FB: FDE5    			push 	iy 							; save the address of that character so we can restore it.
03FD: C1      			pop 	bc 							; when it drops to zero.
03FE: 2607    			ld 		h,SPRLowAddress >> 8
0400: 71      			ld 		(hl),c
0401: 2608    			ld 		h,SPRHighAddress >> 8
0403: 70      			ld 		(hl),b
              			;
              			; 		Copy the graphic definition of the original character into the UDG.
              			;
              	
0404: FD7E00  			ld 		a,(iy+0) 					; get the original character , e.g. the non UDG
0407: FD7500  			ld 		(iy+0),l 					; override it.
              			;
040A: CD2704  			call 	_SPRCalculateDefinitionAddr ; HL is the graphic of the original character
040D: EB      			ex 		de,hl
040E: FD7E00  			ld 		a,(iy+0) 					; HL is the graphic of the UDG
0411: CD2704  			call 	_SPRCalculateDefinitionAddr
0414: EB      			ex 		de,hl 						; we want it copied there
0415: 010800  			ld 		bc,8 						; copy 8 bytes
0418: EDB0    			ldir
              	
041A: FD7E00  			ld 		a,(iy+0) 					; get the address of the UDG and exit with CC
041D:         	_SPRAllocateOneExit;
041D: CD2704  			call 	_SPRCalculateDefinitionAddr ; get the definition address in HL
0420: 3A9104  			ld 		a,(_SPRInitialYOffset) 		; adjust for initial Y offset
0423: B5      			or 		l
0424: 6F      			ld 		l,a
0425: AF      			xor 	a 							; clear carry.
0426: C9      			ret 			
              	;
              	; 		A is a character #, point HL to CRAM Address
              	;
0427:         	_SPRCalculateDefinitionAddr:
0427: 6F      			ld 		l,a
0428: 261E    			ld 		h,$F0/8
042A: 29      			add 	hl,hl
042B: 29      			add 	hl,hl
042C: 29      			add 	hl,hl
042D: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	;							Adjust usage counter for (IY)
              	;
              	; *********************************************************************************************
              	
042E:         	SPRAdjustUsageCounter:
042E: FD6E00  			ld 		l,(iy+0) 					; point HL to the usage counter
0431: 2606    			ld 		h,SPRUsageCount >> 8
0433: DDCB077E			bit 	7,(ix+SPRstatus)			; if drawn status is non-zero we are erasing
0437: 2002    			jr 		nz,_SPRDecrementUsage
0439: 34      			inc 	(hl)						; increment usage counter and exit
043A: C9      			ret
              	;
043B:         	_SPRDecrementUsage:
043B: 35      			dec 	(hl) 						; one fewer usage
043C: C0      			ret 	nz 							; still in use.
              			;
              			; 		Count zero, free up. Could consider delaying this until actually needed?
              			;
043D: 2607    			ld 		h,SPRLowAddress >> 8 		; display address in DE
043F: 5E      			ld 		e,(hl)
0440: 2608    			ld 		h,SPRHighAddress >> 8
0442: 56      			ld 		d,(hl)
0443: 2605    			ld 		h,SPROriginalChar >> 8 		; original character written to DE
0445: 7E      			ld 		a,(hl)
0446: 12      			ld 		(de),a 					
              	
0447: 36FF    			ld 		(hl),$FF 					; mark the UDG as free again.
0449: C9      			ret
              	
              	
              	; *********************************************************************************************
              	;
              	;						Flip ADE - byteflip D or DE and swap.
              	;
              	; *********************************************************************************************
              	
044A:         	SPRFlipDE:
044A: 7A      			ld 	 	a,d 						; flip D
044B: CD5C04  			call 	_SPRFlipA
044E: 57      			ld 		d,a
044F: DDCB0646			bit 	0,(IX+SPRcontrol)  			; if width 1 exit.
0453: C8      			ret 	z
              	
0454: 6B      			ld 		l,e 						; save E
0455: 5F      			ld 		e,a 						; put flipped D into E
0456: 7D      			ld 		a,l 						; get old E, flip into D
0457: CD5C04  			call 	_SPRFlipA
045A: 57      			ld 		d,a
045B: C9      			ret
              	;
              	; 		Flip A
              	;		
045C:         	_SPRFlipA:
045C: B7      			or 		a 							; shortcut, reverse zero.
045D: C8      			ret 	z
045E: CD6504  			call 	_SPRFlipLow 				; flip the low nibble
0461: 0F      			rrca 								; swap halves
0462: 0F      			rrca
0463: 0F      			rrca
0464: 0F      			rrca 								; then fall through to flip high nibble.
0465:         	_SPRFlipLow:			
0465: F5      			push 	af 							; save original
0466: E60F    			and 	$0F 						; access the flip value.
0468: C680    			add 	_SPRFlipTable & $FF
046A: 6F      			ld 		l,a
046B: 2604    			ld 		h,_SPRFlipTable >> 8 
046D: F1      			pop 	af 							; restore original
046E: E6F0    			and 	$F0 						; replace lower nibble
0470: B6      			or 		(hl)
0471: C9      			ret
              	;
              	;		One Nibble Reversed.
              	;
0472: 00000000			.align 	16,0 						; all in one page.
0476: 00...   	
              	
0480:         	_SPRFlipTable:
0480: 0008040C			.db 	0,8,4,12,2,10,6,14
0484: 020A060E	
0488: 0109050D			.db 	1,9,5,13,3,11,7,15
048C: 030B070F	
              	
              	; *********************************************************************************************
              	;
              	; 									General Data
              	;
              	; *********************************************************************************************
              	
0490:         	_SPRRowCount: 								; down counter for completed rows.
0490: 00      			.db 	0
              	
0491:         	_SPRInitialYOffset: 						; the initial vertical offset.
0491: 00      			.db 	0
              	
0492:         	_SPRAllocSPTemp: 							; save SP when storing interim results on stack
0492: 0000    			.dw 	0
              	
0494:         	_SPRFirstUDGSprite: 						; first sprite available as UDG.
0494: 80      			.db 	$80
              	
              	; *********************************************************************************************
              	;
              	;		Sprite/UDG Specific Data. Each of these is a 256 byte array aligned
              	; 		on a page. This is a bit wasteful if you don't have many sprites but quicker.
              	;
              	; *********************************************************************************************
              	
0495: 00000000			.align 	256,0
0499: 00...   	
              	
0500:         	SPRDataBlock:
              	
              	;
              	;		This is the original value stored the UDG replaced. When $FF it means
              	; 		this UDG is not in use.
              	;
0500:         	SPROriginalChar:
0500: 00000000			.ds 	256,0
0504: 00...   	
              	;
              	;
              	; 		This is the number of sprites using the given UDG, indexed on zero.
              	;
0600:         	SPRUsageCount:
0600: 00000000			.ds 	256,0
0604: 00...   	
              	;
              	; 		The address of that replaced UDG. 
              	;
0700:         	SPRLowAddress:
0700: 00000000			.ds 	256,0
0704: 00...   	
0800:         	SPRHighAddress:
0800: 00000000			.ds 	256,0
0804: 00...   	
              	
0900:         	SPRDataBlockEnd:
              	
              	;
              	; 		Copy a lightweight pattern to the screen.
              	;
0900:         	start:
0900: 3100F0  			ld 		sp,$F000
0903: 21B0FC  			ld 		hl,$F800+40*30
0906: 2B      	_fill:	dec 	hl	
0907: 3620    	 		ld 		(hl),$20
0909: 7D      	 		ld 		a,l
090A: C602    	 		add 	a,2
090C: E603    	 		and 	3
090E: 2000    	 		jr 		nz,_fill3
              	; 		ld 		(hl),1
0910:         	_fill3: 		
0910: CB5C    	 		bit 	3,h
0912: 20F2    	 		jr 		nz,_fill
              	
0914: 2108F0  	 		ld 		hl,$F008
0917: 3601    	_fill4:	ld 		(hl),1
0919: 23      			inc 	hl
091A: CB5D    			bit 	3,l
091C: 20F9    			jr 		nz,_fill4 		
              	
091E: CD0502  	 		call 	SPRInitialise
0921: DD215009	 		ld 		ix,SpriteDemo
0925: CD3209  	 		call 	DoRow
0928: DD216009	 		ld 		ix,SpriteDemo2
092C: CD3209  	 		call 	DoRow
092F: F3      	_stop:	di
0930: 18FD    			jr		_stop 		
              	
0932:         	DoRow:
0932: 0608    	 		ld 		b,8
0934:         	_dloop: 		
0934: CD2002  	 		call 	SpriteXDraw
0937: DD7E06  	 		ld 		a,(ix+6)
093A: C620    	 		add 	a,32
093C: E67F    	 		and 	$7F
093E: DD7706  	 		ld 		(ix+6),a
0941: DDCB07BE	 		res 	7,(ix+7)
              	
0945: DD7E00  	 		ld	 	a,(ix+0)
0948: C61C    	 		add 	a,28
094A: DD7700  	 		ld 		(ix+0),a
094D: 10E5    	 		djnz	_dloop
094F: C9      			ret		
              	
              	; *********************************************************************************************
              	;										Test data
              	; *********************************************************************************************
              	
0950:         	SpriteDemo:		
0950: 0400    			.dw 	4 							; X
0952: 0A00    			.dw 	10 							; Y
0954: A809    			.dw 	SpriteGraphic4 				; Graphics
0956: 0000    			.dw 	$00 						; Control
              	
0958:         	SpriteGraphic:
0958: FF818181			.db 	$FF,$81,$81,$81,$81,$81,$81,$FF
095C: 818181FF	
              	
0960:         	SpriteDemo2:		
0960: 1300    			.dw 	19 							; X
0962: 1C00    			.dw 	28 							; Y
0964: 8809    			.dw 	SpriteGraphic3	 			; Graphics
0966: 0300    			.dw 	$03							; Control
              	
0968:         	SpriteGraphic2:
0968: FFFF0180			.dw 	$FFFF,$8001,$F001,$8001,$8001,$8001,$8001,$AAAA
096C: 01F00180	
0970: 01800180	
0974: 0180AAAA	
0978: 555503C0			.dw 	$5555,$C003,$C003,$E007,$F00F,$F81F,$FC3F,$03C0
097C: 03C007E0	
0980: 0FF01FF8	
0984: 3FFCC003	
              	
0988:         	SpriteGraphic3:
0988: 00800040			.dw 	$8000,$4000,$2000,$1000,$0800,$0400,$0200,$0100
098C: 00200010	
0990: 00080004	
0994: 00020001	
0998: 80004000			.dw 	$0080,$0040,$0020,$0010,$0008,$000C,$000E,$000F
099C: 20001000	
09A0: 08000C00	
09A4: 0E000F00	
              	
09A8:         	SpriteGraphic4:
09A8: 80402010			.db 	$80,$40,$20,$10,8,12,14,15
09AC: 080C0E0F	


total time: 0.0034 sec.
no errors
