              	; --------------------------------------
              	; zasm: assemble "test.asm"
              	; date: 2021-10-30 07:46:34
              	; --------------------------------------


              	
              	
              	
0202:         			org 	$202
              	
              	;
              	;	 	Defining SPRLowSprite sets the lowest UDG used by sprites. This is a constant
              	; 		so if this is $A0, then $00-$9F are background, and $A0-$FF are used for sprites.
              	;
00C0:         	SPRLowSprite = $C0 								
              	
              	;
              	; 		Copy a lightweight pattern to the screen.
              	;
0202: 3100F0  			ld 		sp,$F000
0205: 21B0FC  			ld 		hl,$F800+40*30
0208: 2B      	_fill:	dec 	hl	
0209: 7D      			ld 		a,l
020A: E603    	 		and  	3
020C: F62C    	 		or 		$2C
020E: 77      	 		ld 		(hl),a
020F: CB5C    	 		bit 	3,h
0211: 20F5    	 		jr 		nz,_fill
              	;
              	;		Clear all the sprite UDGs (testing only requires this)
              	;
0213: 2100F6  	 		ld 		hl,$F000+SPRLowSprite*8
0216: 3600    	_fill2:	ld 		(hl),0
0218: 23      			inc 	hl
0219: CB5C    			bit 	3,h
021B: 28F9    			jr 		z,_fill2
              	
021D: CD2D02  	 		call 	SPRInitialise
              	
0220: DD210070	 		ld 		ix,SpriteDemo
0224: CD4502  	 		call 	SpriteXDraw
0227: F3      	 		di
0228: CD4502  	 		call 	SpriteXDraw
022B: 18FE    	_stop:	jr		_stop 		
              	
              	
0000:         	SPRx 	= 0 								; horizontal position
0002:         	SPRy 	= 2 								; vertical position
0004:         	SPRgraphics = 4 							; bitmap data
0006:         	SPRcontrol = 6 								; 0:width 1,2:height others zero
0007:         	SPRstatus = 7 								; 7:currently drawn
              	
              	; *********************************************************************************************
              	;
              	; 								Initialise the sprite system.
              	;
              	; *********************************************************************************************
              	
022D:         	SPRInitialise:
022D: F5      			push 	af
022E: E5      			push 	hl
              			;
              			; 		Clear the main data area.
              			;
022F: 210060  			ld 		hl,SPRDataBlock 			
0232:         	_SPRZeroBlock:
0232: 3600    			ld 		(hl),$00
0234: 23      			inc 	hl
0235: 7C      			ld 		a,h
0236: FE64    			cp 		SPRDataBlockEnd >> 8
0238: 20F8    			jr 		nz,_SPRZeroBlock
              			;
              			; 		Set all possible original characters to $FF, indicating they are available.
              			;		
023A: 21C060  			ld 		hl,SPROriginalChar+SPRLowSprite
023D:         	_SPRUsageReset:			 					
023D: 36FF    			ld 		(hl),$FF
023F: 2C      			inc 	l
0240: 20FB    			jr 		nz,_SPRUsageReset
0242: E1      			pop 	hl
0243: F1      			pop 	af
0244: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	;
              	;
              	; *********************************************************************************************
              	
0245:         	SpriteXDraw:
              			;
              			;		Calculate position in IY
              			;
0245: 2600    			ld 		h,0							; Y position in HL, with lower 3 bits masked, so already x 8
0247: DD7E02  			ld 		a,(ix+SPRy)
024A: E6F8    			and 	$F8
024C: 6F      			ld 		l,a
024D: 54      			ld 		d,h 						; DE = Y x 8
024E: 5D      			ld 		e,l
024F: 29      			add 	hl,hl 						; HL = Y x 32
0250: 29      			add 	hl,hl
0251: 19      			add 	hl,de 						; HL = Y x 40
0252: FD2100F8			ld 		iy,$F800 					; IY = $F800 + Y x 40
0256: EB      			ex 		de,hl
0257: FD19    			add 	iy,de
              	
0259: DD5E00  			ld 		e,(ix+SPRx)					; DE = X position
025C: DD5601  			ld 		d,(ix+SPRx+1)
025F: CB3A    			srl 	d 							; / 8 (after first in range 0-255 hence SRL E)
0261: CB1B    			rr 		e
0263: CB3B    			srl 	e
0265: CB3B    			srl 	e
0267: 1600    			ld 		d,0 						; add to screen position.
0269: FD19    			add 	iy,de
              			;
              			; 		Calculate and patch the fine horizontal shift jump which adjusts the 
              			; 		number of 24 bit left shifts we do to the graphics data.
              			;
026B: DD7E00  			ld 		a,(ix+SPRx)
026E: E607    			and 	7
0270: 87      			add 	a,a
0271: 32AA02  			ld 		(_SPRFineHorizontalShift+1),a 
              			;
              			; 		Calculate the horizontal offset which makes it start drawing part way through a UDG
              			;
0274: DD7E02  			ld 		a,(ix+SPRy)
0277: E607    			and 	7
0279: 32A803  			ld 		(_SPRInitialYOffset),a
              			;
              			; 		Calculate the row count from bits 1 and 2 of the control byte.
              			; 		(the number of vertical pixels down)
              			;
027C: DD7E06  			ld 		a,(ix+SPRcontrol)
027F: E606    			and 	$06
0281: 47      			ld 		b,a 						; B is 0,2,4,6 for 8,16,24,32
0282: AF      			xor 	a
0283:         	_SPRCalcRows:
0283: C608    			add 	a,8
0285: 05      			dec 	b	
0286: 05      			dec 	b
0287: F28302  			jp 		p,_SPRCalcRows	
028A: 32A703  			ld 		(_SPRRowCount),a
              			;
              			; 		Load BC with the sprite graphic data, we preserve this throughout
              			; 		drawing.
              			;
028D: DD4E04  			ld 		c,(ix+SPRgraphics)
0290: DD4605  			ld 		b,(ix+SPRgraphics+1)
              			;
              			; 		Try to allocate UDGs for the current row at IY, 2 or 3 UDGs.
              			;
0293:         	_SPRStartNextCharacterRow:
0293: CD0103  			call 	_SPRAllocateRow 			; try to allocate the whole row.
0296: 3868    			jr 		c,_SPRExit					; it didn't work, so we abandon drawing here.
              			;
              			;		Get the graphics for the next *pixel* line. into ADE
              			;
0298:         	_SPRNextRowUDG:		
0298: 1E00    			ld 		e,0							; DE = $00:BC
029A: 0A      			ld 		a,(bc)
029B: 57      			ld 		d,a
029C: 03      			inc 	bc
029D: DDCB0646			bit 	0,(ix+SPRcontrol) 					; is the width 1 ?
02A1: 2804    			jr 		z,_SPRHaveGraphicData
02A3: 5A      			ld 		e,d  						; DE = (BC+1):(BC)		
02A4: 0A      			ld 		a,(bc)
02A5: 57      			ld 		d,a 
02A6: 03      			inc 	bc
02A7:         	_SPRHaveGraphicData:		
02A7: AF      			xor 	a 							; ADE contains 24 bit graphic data.
02A8: EB      			ex 		de,hl 						; we put it in AHL
02A9:         	_SPRFineHorizontalShift:		
02A9: 1800    			jr 		$+2 						; this is altered to do the fine horizontal shift
02AB: 29      			add 	hl,hl
02AC: 8F      			adc 	a,a
02AD: 29      			add 	hl,hl
02AE: 8F      			adc 	a,a
02AF: 29      			add 	hl,hl
02B0: 8F      			adc 	a,a
02B1: 29      			add 	hl,hl
02B2: 8F      			adc 	a,a
02B3: 29      			add 	hl,hl
02B4: 8F      			adc 	a,a
02B5: 29      			add 	hl,hl
02B6: 8F      			adc 	a,a
02B7: 29      			add 	hl,hl
02B8: 8F      			adc 	a,a
02B9: 29      			add 	hl,hl
02BA: 8F      			adc 	a,a
02BB: EB      			ex 		de,hl 						; put it back in ADE
              			;
              			;		Now XOR the data with the previously calculated addresses. 
              			;		If (ix+5)[0] is clear then don't do the third one, it's an 8x8 sprite
              			;
              			;		These addresses (the ld hl,xxxx ones) are modified in situ.
              			;
02BC:         	_SPRLeftUDGPosition:		
02BC: 2108F6  			ld 		hl,$F000+$C1*8
02BF: AE      			xor 	(hl)
02C0: 77      			ld 		(hl),a
02C1:         	_SPRMiddleUDGPosition:		
02C1: 2110F6  			ld 		hl,$F000+$C2*8
02C4: 7A      			ld 		a,d
02C5: AE      			xor 	(hl)
02C6: 77      			ld 		(hl),a
02C7: DDCB0646			bit 	0,(ix+SPRcontrol) 					; if width 1, skip the last draw
02CB: 2806    			jr 		z,_SPRDrawEnd
02CD:         	_SPRRightUDGPosition:		
02CD: 2118F6  			ld 		hl,$F000+$C3*8
02D0: 7B      			ld 		a,e
02D1: AE      			xor 	(hl)
02D2: 77      			ld 		(hl),a
02D3:         	_SPRDrawEnd:
              			;
              			; 		Adjust the usage counters.
              			;
              			; TODO : Adjust usage counters.
              			;
              			; 		Check if we have done all the rows
              			;
02D3: 21A703  			ld 		hl,_SPRRowCount 
02D6: 35      			dec 	(hl)
02D7: 2827    			jr 		z,_SPRExit
              			;
              			; 		Now go to the next line down. Initially this just advances the vertical offset
              			;		in the UDG pointers
              			;
02D9: 21BD02  			ld 		hl,_SPRLeftUDGPosition+1
02DC: 34      			inc 	(hl)
02DD: 21C202  			ld 		hl,_SPRMiddleUDGPosition+1
02E0: 34      			inc 	(hl)
02E1: 21CE02  			ld 		hl,_SPRRightUDGPosition+1
02E4: 34      			inc 	(hl)
              			;
02E5: 7E      			ld 		a,(hl) 						; check crossed 8 byte boundary
02E6: E607    			and 	7
02E8: 20AE    			jr 		nz,_SPRNextRowUDG 			; if not complete it.
              	
02EA: AF      			xor 	a 							; clear the initial offset
02EB: 32A803  			ld 		(_SPRInitialYOffset),a
              	
02EE: 112800  			ld 		de,40 						; advance down one row.
02F1: FD19    			add 	iy,de 
              	
02F3: 11B0FC  			ld 		de,$F800+40*30 				; the end of the physical display
02F6: FDE5    			push 	iy
02F8: E1      			pop 	hl
02F9: 37      			scf
02FA: ED52    			sbc 	hl,de
02FC: 3002    			jr 		nc,_SPRExit 				; past the bottom,exit.
              	
02FE: 1893    			jr 		_SPRStartNextCharacterRow 	; do the next character row.
              	
0300:         	_SPRExit:
0300: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	;		Allocate 0-3 UDGs to the character space according to need and availability.
              	; 		Fail with CS if can't.
              	;		If possible,
              	;			all new UDGs should have the copied graphic from the background and the
              	;			old background set up.
              	;			the UDGs should replace the graphics in IY.
              	;
              	; *********************************************************************************************
              	
0301:         	_SPRAllocateRow:
0301: C5      			push 	bc 							; save BC.
0302: FDE5    			push 	iy 							; save IY
0304: ED73A903			ld 		(_SPRAllocSPTemp),sp		; save SP as we are using it for temp.
              	
0308: 210000  			ld 		hl,$0000 					; we save all the allocated so far on the stack
030B: E5      			push 	hl 		 					; this is the end marker.					
              			;
              			; 		Do 2 or 3. For each overwrite the XOR code addresses and save
              			;		it on the stack. If it fails, then unwind everything.
              			;
030C: CD5C03  			call 	_SPRAllocateOne 			; do (IY)
030F: 3821    			jr 		c,_SPRAllocateUndo 			; if done, then Undo.
0311: 22BD02  			ld 		(_SPRLeftUDGPosition+1),hl 	; overwrite the code.
0314: E5      			push 	hl
              	
0315: FD23    			inc 	iy		
0317: CD5C03  			call 	_SPRAllocateOne 			; do (IY+1)
031A: 3816    			jr 		c,_SPRAllocateUndo 			; if done, then Undo.
031C: 22C202  			ld 		(_SPRMiddleUDGPosition+1),hl ; overwrite the code.
031F: E5      			push 	hl
              	
0320: DDCB0646			bit 	0,(ix+SPRcontrol) 			; if 8 width then we are done.
0324: 282D    			jr 		z,_SPRAllocateOkay 
              	
0326: FD23    			inc 	iy		
0328: CD5C03  			call 	_SPRAllocateOne 			; do (IY+2)
032B: 3805    			jr 		c,_SPRAllocateUndo 			; if done, then Undo.
032D: 22CE02  			ld 		(_SPRRightUDGPosition+1),hl ; overwrite the code.
0330: 1821    			jr 		_SPRAllocateOkay 
              			;
              			; 		Failed, so pop the saved UDG addresses on the stack and reset
              			;	 	as if we hadn't allocated it. We haven't bumped the usage count yet.
              			;
0332:         	_SPRAllocateUndo:
0332: D1      			pop 	de 							; address of UDG into DE
0333: 7A      			ld 		a,d 						; have we done the whole lot ?
0334: B3      			or 		e
0335: 37      			scf
0336: 281C    			jr 		z,_SPRAllocateExit 			; if so, e.g. popped $0000 with carry set.
              	
0338: CB3A    			srl 	d 							; divide by 8 - will put the UDG number into E
033A: CB1B    			rr 		e
033C: CB3A    			srl 	d
033E: CB1B    			rr 		e
0340: CB3A    			srl 	d
0342: CB1B    			rr 		e
              			;
0344: 6F      			ld 		l,a 						; HL is the address of the original character for this UDG.
0345: 2660    			ld 		h,SPROriginalChar >> 8 		
0347: 7E      			ld 		a,(hl) 						; character the UDG replaced
0348: 36FF    			ld 		(hl),$FF 					; mark that UDG as now available
              	
034A: 2662    			ld 		h,SPRLowAddress >> 8 		; get screen address into DE
034C: 5E      			ld 		e,(hl)
034D: 2663    			ld 		h,SPRHighAddress >> 8 
034F: 56      			ld 		d,(hl)
              	
0350: 12      			ld 		(de),a 						; fix up screen
              	
0351: 18DF    			jr 		_SPRAllocateUndo 			; and see if there are any more to undo
              			;
              			; 		Worked, exit with carry clear.
              			;
0353:         	_SPRAllocateOkay: 							; clear carry flag and exit.
0353: AF      			xor 	a		
0354:         	_SPRAllocateExit:
0354: ED7BA903			ld 		sp,(_SPRAllocSPTemp)		; get SP back
0358: FDE1    			pop 	iy 							; restore BC IY
035A: C1      			pop 	bc				
035B: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	; 		Allocate a single UDG sprite, overwriting (IY), saving the original and copying
              	; 		the definition. On exit HL points to its graphic definition.
              	;
              	; *********************************************************************************************
              	
035C:         	_SPRAllocateOne:
035C: FD7E00  			ld 		a,(iy+0) 					; is it a UDG already
035F: FEC0    			cp 		SPRLowSprite 				; if so, we don't need to do anything.
0361: 3033    			jr 		nc,_SPRAllocateOneExit
              			;
              			; 		Look for a free UDG, e.g. one where the stored character is $FF.
              			;
0363: 21C060  			ld 		hl,SPROriginalChar+SPRLowSprite
0366:         	_SPRAOFind: 								; look for an available UDG.
0366: 7E      			ld 		a,(hl)
0367: FEFF    			cp 		$FF
0369: 2805    			jr 		z,_SPRAOFound
036B: 2C      			inc 	l
036C: 20F8    			jr 		nz,_SPRAOFind		
036E: 37      			scf 								; nope, we just can't do this one.
036F: C9      			ret
              	;
              	;  		Found a sprite we can allocate
              	;
0370:         	_SPRAOFound:
              			;
              			; 		Store the character overwritten by the UDG
              			;
0370: FD7E00  			ld 		a,(iy+0) 					; this is the original character e.g. what is underneath
0373: 77      			ld 		(hl),a 						; put in storage slot for original character
              			;
0374: FDE5    			push 	iy 							; save the address of that character so we can restore it.
0376: C1      			pop 	bc 							; when it drops to zero.
0377: 2662    			ld 		h,SPRLowAddress >> 8
0379: 71      			ld 		(hl),c
037A: 2663    			ld 		h,SPRHighAddress >> 8
037C: 70      			ld 		(hl),b
              			;
              			; 		Copy the graphic definition of the original character into the UDG.
              			;
037D: FD7E00  			ld 		a,(iy+0) 					; get the original character , e.g. the non UDG
              			;
0380: FD7500  			ld 		(iy+0),l 					; put the UDG on the screen.
0383: CDA003  			call 	_SPRCalculateDefinitionAddr ; HL is the graphic of the original character
0386: EB      			ex 		de,hl
0387: FD7E00  			ld 		a,(iy+0) 					; HL is the graphic of the UDG
038A: CDA003  			call 	_SPRCalculateDefinitionAddr
038D: EB      			ex 		de,hl 						; we want it copied there
038E: 010800  			ld 		bc,8 						; copy 8 bytes
0391: EDB0    			ldir
              	
0393: FD7E00  			ld 		a,(iy+0) 					; get the address of the UDG and exit with CC
0396:         	_SPRAllocateOneExit;
0396: CDA003  			call 	_SPRCalculateDefinitionAddr ; get the definition address in HL
0399: 3AA803  			ld 		a,(_SPRInitialYOffset) 		; adjust for initial Y offset
039C: B5      			or 		l
039D: 6F      			ld 		l,a
039E: AF      			xor 	a 							; clear carry.
039F: C9      			ret 			
              	;
              	; 		A is a character #, point HL to CRAM Address
              	;
03A0:         	_SPRCalculateDefinitionAddr:
03A0: 6F      			ld 		l,a
03A1: 261E    			ld 		h,$F0/8
03A3: 29      			add 	hl,hl
03A4: 29      			add 	hl,hl
03A5: 29      			add 	hl,hl
03A6: C9      			ret
              	
              	
              	; *********************************************************************************************
              	;
              	; 									General Data
              	;
              	; *********************************************************************************************
              	
03A7:         	_SPRRowCount: 								; down counter for completed rows.
03A7: 00      			.db 	0
              	
03A8:         	_SPRInitialYOffset: 						; the initial vertical offset.
03A8: 00      			.db 	0
              	
03A9:         	_SPRAllocSPTemp: 							; save SP when storing interim results on stack
03A9: 0000    			.dw 	0
03AB: FFFFFFFF			.org 	$6000
03AF: FF...   	
              	
              	; *********************************************************************************************
              	;
              	;		Sprite/UDG Specific Data. Each of these is a 256 byte array aligned
              	; 		on a page.
              	;
              	; *********************************************************************************************
              	
6000:         	SPRDataBlock:
              	
              			.align 	256,0
              	;
              	;		This is the original value stored the UDG replaced. When $FF it means
              	; 		this UDG is not in use.
              	;
6000:         	SPROriginalChar:
6000: FFFFFFFF			.ds 	256
6004: FF...   	
              	;
              	;
              	; 		This is the number of sprites using the given UDG, indexed on zero.
              	;
6100:         	SPRUsageCount:
6100: FFFFFFFF			.ds 	256
6104: FF...   	
              	;
              	; 		The address of that replaced UDG. 
              	;
6200:         	SPRLowAddress:
6200: FFFFFFFF			.ds 	256
6204: FF...   	
6300:         	SPRHighAddress:
6300: FFFFFFFF			.ds 	256
6304: FF...   	
              	
6400:         	SPRDataBlockEnd:
              	
              	; *********************************************************************************************
              	;										Test data
              	; *********************************************************************************************
              	
6400: FFFFFFFF			.org 	$7000
6404: FF...   	
7000:         	SpriteDemo:		
7000: 0A00    			.dw 	10 							; X
7002: 0400    			.dw 	4 							; Y
7004: 0870    			.dw 	SpriteGraphic 				; Graphics
7006: 0000    			.dw 	$00 						; 2,1:Height 0:Width others 0.
              	
7008:         	SpriteGraphic:
7008: FF818181			.db 	$FF,$81,$81,$81,$81,$81,$81,$FF
700C: 818181FF	
              	
7010:         	SpriteDemo2:		
7010: 1300    			.dw 	19 							; X
7012: 1C00    			.dw 	28 							; Y
7014: 1870    			.dw 	SpriteGraphic2 				; Graphics
7016: 0300    			.dw 	$03							; 2,1:Height 0:Width others 0.
              	
7018:         	SpriteGraphic2:
7018: FFFF0180			.dw 	$FFFF,$8001,$F001,$8001,$8001,$8001,$8001,$AAAA
701C: 01F00180	
7020: 01800180	
7024: 0180AAAA	
7028: 555503C0			.dw 	$5555,$C003,$C003,$E007,$F00F,$F81F,$FC3F,$03C0
702C: 03C007E0	
7030: 0FF01FF8	
7034: 3FFCC003	
              	


total time: 0.0025 sec.
no errors
