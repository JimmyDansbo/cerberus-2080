              	; --------------------------------------
              	; zasm: assemble "_mgr.asm"
              	; date: 2021-11-02 12:07:21
              	; --------------------------------------


              	
0202:         			org 	$202
              	
              	;
              	;	 	Defining SPRLowSprite sets the lowest UDG used by sprites. This is a constant
              	; 		so if this is $A0, then $00-$9F are background, and $A0-$FF are used for sprites.
              	;
0080:         	SPRLowSprite = $80 								
0008:         	SpriteCount = 8
              	
0202: C30009  			jp 		start
              			.include 	"spritemanager.asm"
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;		Name:		spritemanager.asm
              	;		Purpose:	Sprite Manager
              	;		Created:	1st November 2021
              	;		Author:		Paul Robson (paul@robsons.org.uk)
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;		Sprite Record:
              	;
              	;			Copy data:
              	;				0..6 	X:2 	Y:2 	Graphics:2 	Control:1
              	;				7 		Change flag
              	; 			Current Data: (as per xsprite.asm)
              	;				8..14 	X:2 	Y:2 	Graphics:2 	Control:1
              	;				15 		Status byte
              	;
              	;		When being updated, if the change flag is set, then the sprite is removed, then data 
              	;		(0-6) is copied to (8-14), then the sprite redrawn
              	;
              	;		The option also exists to erase all sprites ; the point of such being that one can update
              	;		the background. This sets all the change flags so the sprites are redrawn on the next sync.
              	;
              	; *********************************************************************************************
              	;
              	;
              	;			Reset Sprite Manager. HL points to data block, DE is number of sprites
              	;
              	;
              	; *********************************************************************************************
              	
0205:         	SPMReset:
0205: F5      			push 	af
0206: C5      			push 	bc
0207: D5      			push 	de
0208: E5      			push 	hl
0209: 224F02  			ld 		(SPMData),hl 				; save count and address
020C: 7B      			ld 		a,e
020D: 325102  			ld 		(SPMCount),a
0210: 87      			add 	a,a 						; double, as we clear it twice (2 x 8 byte blocks)
0211: 47      			ld 		b,a
0212:         	_SPMClear:
0212: 0E06    			ld 		c,6 						; write out 6 $FFs to position and graphic
0214:         	_SPMClear2:		
0214: 36FF    			ld 		(hl),$FF
0216: 23      			inc 	hl
0217: 0D      			dec 	c
0218: 20FA    			jr 		nz,_SPMClear2
021A: 71      			ld 		(hl),c 						; followed by 2 zeros (control and status/change byte)		
021B: 23      			inc 	hl
021C: 71      			ld 		(hl),c
021D: 23      			inc 	hl
021E: 10F2    			djnz 	_SPMClear
0220: 210000  			ld 		hl,0 						; no current selection
0223: 225302  			ld 		(SPMCurrent),hl
0226: CD5502  			call 	SPRInitialise 				; erase the sprite control records.
0229: E1      			pop 	hl
022A: D1      			pop 	de
022B: C1      			pop 	bc
022C: F1      			pop 	af
022D: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	;		Sprite functions/words. A sprite is selected via SPMSelect and then moved, graphics 
              	; 		set etc. by other functions. SPMUpdate updates all sprites. Parameters at L/HL then DE.
              	;
              	; *********************************************************************************************
              	
022E:         	SPMSelect:
022E: F5      			push 	af
022F: C5      			push 	bc
0230: E5      			push 	hl
0231: 3A5102  			ld		a,(SPMCount)
0234: BD      			cp 		l 							; compare max vs selected.
0235: 280E    			jr 		z,_SPMSFail 				; must be >
0237: FA4502  			jp 		m,_SPMSFail
              	
023A: 29      			add 	hl,hl 						; x 16
023B: 29      			add 	hl,hl
023C: 29      			add 	hl,hl
023D: 29      			add 	hl,hl
023E: ED5B4F02			ld 		de,(SPMData) 				; add base address
0242: 19      			add 	hl,de
0243: 1803    			jr 		_SPMSExit 					; write and exit
              	
0245:         	_SPMSFail:
0245: 210000  			ld 		hl,$0000
0248:         	_SPMSExit:
0248: 225302  			ld 		(SPMCurrent),hl
024B: E1      			pop 	hl
024C: D1      			pop 	de
024D: F1      			pop 	af
024E: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	;										Update all sprites
              	;
              	; *********************************************************************************************
              	
024F:         	SPMUpdate:
              	
              	
024F:         	SPMData: 									; address of sprite
024F: 0000    			.dw 	0
0251:         	SPMCount: 									; number of sprites
0251: 0000    			.dw 	0
0253:         	SPMCurrent: 								; currently selected sprite (0 = None.)
0253: 0000    			.dw 	0		
              			.include 	"xsprite.asm"
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;		Name:		xsprite.asm
              	;		Purpose:	XOR Sprite Drawer
              	;		Created:	29th October 2021
              	;		Author:		Paul Robson (paul@robsons.org.uk)
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	
              	; *********************************************************************************************
              	;
              	;		This is an XOR drawing sprite system. This is useful because the draw is self
              	;		cancelling, and this means you don't have to repaint multiple sprites to restore
              	; 		the display state. The downside is that it doesn't work well on collisions or 
              	; 		especially backgrounds.
              	;
              	;		The original design, which was a simpler draw all/erase all design, was binned 
              	;		because I thought on real hardware it would create too much flash on the display.
              	;
              	;		I don't yet have a real machine so can't evaluate this in practice, as the emulator
              	; 		snapshots the display at 60Mhz, so the effects of endlessly messing with the 
              	;		CRAM and VRAM is largely hidden.
              	;
              	;		At 4Mhz it does about 330 draws/erases a second on a 16x16 sprites, twice as fast on
              	;		8 pixel high sprites.
              	;
              	;		It eats UDGs - a single 16x16 sprite needs 9 UDGs if it doesn't overlap with another.
              	;
              	; *********************************************************************************************
              	;
              	;		How it works. 
              	;
              	;			When drawing a sprite, it will try to allocate UDGs from its pool for the space
              	; 			to draw the sprite. When drawing or erasing it then XORs the bit patterns into this
              	; 			as far as it can. When erased, UDGs are returned to the pool if no longer required.
              	;
              	; *********************************************************************************************
              	;
              	;		Offsets from IX.
              	;
              	;			+0,+1 		Horizontal position (0..319)
              	;			+2,+3 		Vertical position (0..239)
              	;			+4,+5 		Pointer to graphic image data.
              	;							Width : 8  	one byte per row
              	;							Width : 16 	two bytes per row left-right order
              	;			+6 			Control
              	;							Bit 7: 		Set if sprite disabled
              	;							Bit 6: 		Vertical flip
              	;							Bit 5:		Horizontal flip
              	;							Bit 4..2:	0
              	;							Bit 1:		Double width
              	;							Bit 0: 		Double height
              	;			+7 			Status
              	;							Bit 7:		Set when drawn on screen
              	;							Bit 6..0:	0
              	;
              	;			Changes should only be made when the sprite is not drawn, otherwise chaos
              	;			will ensue.
              	;
              	;			Draws will not fail, however, they may not visually work either. If there are more
              	;			UDGs required than available graphics will not be drawn, or possibly drawn
              	;			erratically. It is advised to minimise the number of sprites both for CPU time
              	;			and UDG usage. 
              	;
              	;			Use specific UDGs for static/slow objects. For (say) Pacman the only sprites should
              	;			be the player character and chasing ghosts.
              	;
              	; *********************************************************************************************
              	;
              	;								  Sprite Record entries
              	;
              	; *********************************************************************************************
              	
0000:         	SPRx 	= 0 								; horizontal position, pixels
0002:         	SPRy 	= 2 								; vertical position, pixels
0004:         	SPRgraphics = 4 							; bitmap data
0006:         	SPRcontrol = 6 								; 0:width 1:height 5:HFlip 6:VFlip 7:hidden
              												; (others are zero)
0007:         	SPRstatus = 7 								; 7:currently drawn
              	
              	; *********************************************************************************************
              	;
              	; 								Initialise the sprite system.
              	;
              	; 	At this point sprite records should all have their "currently drawn" bit clear, it will
              	; 	get very confused otherwise.
              	;
              	; *********************************************************************************************
              	
0255:         	SPRInitialise:
0255: F5      			push 	af
0256: E5      			push 	hl
              			;
              			; 		Clear the main data area.
              			;
0257: 210005  			ld 		hl,SPRDataBlock 			
025A:         	_SPRZeroBlock:
025A: 3600    			ld 		(hl),$00
025C: 23      			inc 	hl
025D: 7C      			ld 		a,h
025E: FE09    			cp 		SPRDataBlockEnd >> 8
0260: 20F8    			jr 		nz,_SPRZeroBlock
              			;
              			; 		Set all possible original characters to $FF, indicating they are available.
              			;		
0262: 218005  			ld 		hl,SPROriginalChar+SPRLowSprite
0265:         	_SPRUsageReset:			 					
0265: 36FF    			ld 		(hl),$FF
0267: 2C      			inc 	l
0268: 20FB    			jr 		nz,_SPRUsageReset
026A: E1      			pop 	hl
026B: F1      			pop 	af
026C: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	;						Draw, or Erase, the sprite whose raw data is at IX
              	;
              	; *********************************************************************************************
              	
026D:         	SpriteXDraw: 								; draw only
026D: DDCB077E			bit 	7,(ix+SPRstatus)
0271: C0      			ret 	nz
0272: 1805    			jr 		SpriteXToggle
0274:         	SpriteXErase:								; erase only
0274: DDCB077E			bit 	7,(ix+SPRstatus)
0278: C8      			ret 	z
0279:         	SpriteXToggle:								; flip state
0279: F5      			push 	af 							; save registers 							
027A: C5      			push 	bc
027B: D5      			push 	de
027C: E5      			push 	hl
027D: FDE5    			push 	iy
              			;
              			; 		Check actually visible
              			;
027F: DDCB067E			bit 	7,(ix+SPRcontrol)
0283: C2B403  			jp 		nz,_SPRExit
              			;
              			; 		Check range.
              			;
0286: DD7E01  			ld 		a,(ix+SPRx+1) 				; MSB of X must be 0 or 1
0289: 47      			ld 		b,a 						; save in B
028A: E6FE    			and 	$FE
028C: DDB603  			or 		a,(ix+SPRy+1) 				; MSB of Y must be zero.
028F: 2011    			jr 		nz,_SPRRangeFail
              			;
0291: DD7E02  			ld 		a,(ix+SPRy) 				; check Y < 240
0294: FEF0    			cp 		8*30
0296: 300A    			jr 		nc,_SPRRangeFail
              			;
0298: 05      			dec 	b 							; if MSB X was 1, now zero
0299: 200A    			jr 		nz,_SPRCalcPosition 
              			;
029B: DD7E00  			ld 		a,(ix+SPRx) 				; X.MSB was 1, so must be X.LSB < 64
029E: FE40    			cp 		64
02A0: 3803    			jr 		c,_SPRCalcPosition
02A2:         	_SPRRangeFail:
02A2: C3B403  			jp 		_SPRExit 	
              			;
              			;		Calculate position in IY
              			;
02A5:         	_SPRCalcPosition:		
02A5: 2600    			ld 		h,0							; Y position in HL, with lower 3 bits masked, so already x 8
02A7: DD7E02  			ld 		a,(ix+SPRy)
02AA: E6F8    			and 	$F8
02AC: 6F      			ld 		l,a
02AD: 54      			ld 		d,h 						; DE = Y x 8
02AE: 5D      			ld 		e,l
02AF: 29      			add 	hl,hl 						; HL = Y x 32
02B0: 29      			add 	hl,hl
02B1: 19      			add 	hl,de 						; HL = Y x 40
02B2: FD2100F8			ld 		iy,$F800 					; IY = $F800 + Y x 40
02B6: EB      			ex 		de,hl
02B7: FD19    			add 	iy,de
              	
02B9: DD5E00  			ld 		e,(ix+SPRx)					; DE = X position
02BC: DD5601  			ld 		d,(ix+SPRx+1)
02BF: CB3A    			srl 	d 							; / 8 (after first in range 0-255 hence SRL E)
02C1: CB1B    			rr 		e
02C3: CB3B    			srl 	e
02C5: CB3B    			srl 	e
02C7: 1600    			ld 		d,0 						; add to screen position.
02C9: FD19    			add 	iy,de
              			;
              			; 		Calculate and patch the fine horizontal shift jump which adjusts the 
              			; 		number of 24 bit left shifts we do to the graphics data.
              			;
02CB: DD7E00  			ld 		a,(ix+SPRx)
02CE: E607    			and 	7
02D0: 87      			add 	a,a
02D1: 325D03  			ld 		(_SPRFineHorizontalShift+1),a 
              			;
              			; 		Calculate the horizontal offset which makes it start drawing part way through a UDG
              			;
02D4: DD7E02  			ld 		a,(ix+SPRy)
02D7: E607    			and 	7
02D9: 32D104  			ld 		(_SPRInitialYOffset),a
              			;
              			; 		Calculate the row count from bit 1 of the control byte
              			; 		(the number of vertical pixels down)
              			;
02DC: 3E08    			ld 		a,8
02DE: DDCB064E			bit 	1,(ix+SPRcontrol)
02E2: 2801    			jr 		z,_SPRSingleHeight
02E4: 87      			add 	a,a
02E5:         	_SPRSingleHeight:		
02E5: 32D004  			ld 		(_SPRRowCount),a
              			;
              			;		Set the sprite graphic address and incrementer.
              			;
02E8: DD6E04  			ld 		l,(ix+SPRgraphics) 			; data address
02EB: DD6605  			ld 		h,(ix+SPRgraphics+1) 		
02EE: 110100  			ld 		de,1 						; increment/decrement
02F1: DDCB0646			bit 	0,(ix+SPRcontrol)
02F5: 2801    			jr 		z,_SPRSGANotDoubleWidth
02F7: 13      			inc 	de 							; 2 if double width
02F8:         	_SPRSGANotDoubleWidth:
02F8: DDCB0676			bit 	6,(ix+SPRcontrol) 			; check for vertical flip.
02FC: 2818    			jr 		z,_SPRSGANotVFlip
              			;
02FE: EB      			ex 		de,hl 						; DE = address, HL = increment x 8
02FF: E5      			push 	hl
0300: 29      			add 	hl,hl
0301: 29      			add 	hl,hl
0302: 29      			add 	hl,hl
0303: DDCB064E			bit 	1,(ix+SPRcontrol) 			; x 16 if double height
0307: 2801    			jr 		z,_SPRSGANotDoubleHeight
0309: 29      			add 	hl,hl		
030A:         	_SPRSGANotDoubleHeight:
030A: 19      			add 	hl,de 						; add 8/16 x increment to start
030B: C1      			pop 	bc 							; original increment -> BC
030C: E5      			push 	hl 							; save new start on stack.
030D: 210000  			ld 		hl,0 						; HL = - increment
0310: AF      			xor 	a
0311: ED42    			sbc 	hl,bc
0313: D1      			pop 	de 							; DE = new start off stack
0314: EB      			ex 		de,hl 						; swap them back so HL = address, DE = -increment
0315: 19      			add 	hl,de 						; points HL to the last sprite entry.
0316:         	_SPRSGANotVFlip:
0316: 223B03  			ld 		(_SPRFetchGraphicPtr+1),hl 	; write out start address in HL and incrementer in DE.		
0319: ED534B03			ld 		(_SPRAdjustGraphicPtr+1),de
              			;
              			; 		Try to allocate UDGs for the current row at IY, 2 or 3 UDGs.
              			;
031D:         	_SPRStartNextCharacterRow:
031D: CDC303  			call 	_SPRAllocateRow 			; try to allocate the whole row.
0320: DAB403  			jp 		c,_SPRExit					; it didn't work, so we abandon drawing here.
              			;
              			; 		Adjust the usage counters.
              			;
0323: FDE5    			push 	iy
0325: CD7604  			call 	SPRAdjustUsageCounter
0328: FD23    			inc 	iy
032A: CD7604  			call 	SPRAdjustUsageCounter
032D: DDCB0646			bit 	0,(ix+SPRcontrol)
0331: 2805    			jr 		z,_SPRAuNotRight
0333: FD23    			inc 	iy
0335: CD7604  			call 	SPRAdjustUsageCounter
0338:         	_SPRAuNotRight:
0338: FDE1    			pop 	iy		
              			;
              			;		Get the graphics for the next *pixel* line. into ADE
              			;
033A:         	_SPRNextRowUDG:		
              			;
033A:         	_SPRFetchGraphicPtr:
033A: 210000  			ld 		hl,$0000
033D: 1E00    			ld 		e,0							; DE = $00:(HL)
033F: 56      			ld 		d,(hl)
0340: DDCB0646			bit 	0,(ix+SPRcontrol) 			; is the width 1 ?
0344: 2804    			jr 		z,_SPRHaveGraphicData
0346: 23      			inc 	hl
0347: 5A      			ld 		e,d  						; DE = (HL+1):(HL)		
0348: 56      			ld 		d,(hl)
0349: 2B      			dec 	hl		
034A:         	_SPRHaveGraphicData:		
              			;
034A:         	_SPRAdjustGraphicPtr:
034A: 010000  			ld 		bc,$0000 					; this is changed to account for size and
034D: 09      			add 	hl,bc 						; direction.
034E: 223B03  			ld 		(_SPRFetchGraphicPtr+1),hl		
              			;
              			; 		Check for Horizontal Flip
              			;
0351: DDCB066E			bit 	5,(ix+SPRcontrol)			; if HFlip bit set
0355: 2803    			jr 		z,_SPRNoHFlip
0357: CD9204  			call 	SPRFlipDE 					; Flip DE
035A:         	_SPRNoHFlip:		
035A: AF      			xor 	a 							; ADE contains 24 bit graphic data.
035B: EB      			ex 		de,hl 						; we put it in AHL
035C:         	_SPRFineHorizontalShift:		
035C: 1800    			jr 		$+2 						; this is altered to do the fine horizontal shift
035E: 29      			add 	hl,hl
035F: 8F      			adc 	a,a
0360: 29      			add 	hl,hl
0361: 8F      			adc 	a,a
0362: 29      			add 	hl,hl
0363: 8F      			adc 	a,a
0364: 29      			add 	hl,hl
0365: 8F      			adc 	a,a
0366: 29      			add 	hl,hl
0367: 8F      			adc 	a,a
0368: 29      			add 	hl,hl
0369: 8F      			adc 	a,a
036A: 29      			add 	hl,hl
036B: 8F      			adc 	a,a
036C: 29      			add 	hl,hl
036D: 8F      			adc 	a,a
036E: EB      			ex 		de,hl 						; put it back in ADE
              			;
              			;		Now XOR the data with the previously calculated addresses. 
              			;		If (ix+5)[0] is clear then don't do the third one, it's an 8x8 sprite
              			;
              			;		These addresses (the ld hl,xxxx ones) are modified in situ.
              			;
036F:         	_SPRLeftUDGPosition:		
036F: 2108F6  			ld 		hl,$F000+$C1*8
0372: AE      			xor 	(hl)
0373: 77      			ld 		(hl),a
0374:         	_SPRMiddleUDGPosition:		
0374: 2110F6  			ld 		hl,$F000+$C2*8
0377: 7A      			ld 		a,d
0378: AE      			xor 	(hl)
0379: 77      			ld 		(hl),a
037A: DDCB0646			bit 	0,(ix+SPRcontrol) 					; if width 1, skip the last draw
037E: 2806    			jr 		z,_SPRDrawEnd
0380:         	_SPRRightUDGPosition:		
0380: 2118F6  			ld 		hl,$F000+$C3*8
0383: 7B      			ld 		a,e
0384: AE      			xor 	(hl)
0385: 77      			ld 		(hl),a
0386:         	_SPRDrawEnd:
              			;
              			; 		Check if we have done all the rows
              			;
0386: 21D004  			ld 		hl,_SPRRowCount 
0389: 35      			dec 	(hl)
038A: 2828    			jr 		z,_SPRExit
              			;
              			; 		Now go to the next line down. Initially this just advances the vertical offset
              			;		in the UDG pointers
              			;
038C: 217503  			ld 		hl,_SPRMiddleUDGPosition+1
038F: 34      			inc 	(hl)
0390: 218103  			ld 		hl,_SPRRightUDGPosition+1 	; not guaranteed initialised.
0393: 34      			inc 	(hl)
0394: 217003  			ld 		hl,_SPRLeftUDGPosition+1
0397: 34      			inc 	(hl)
              			;
0398: 7E      			ld 		a,(hl) 						; check crossed 8 byte boundary
0399: E607    			and 	7
039B: 209D    			jr 		nz,_SPRNextRowUDG 			; if not complete it.
              	
039D: AF      			xor 	a 							; clear the initial offset
039E: 32D104  			ld 		(_SPRInitialYOffset),a
              	
              	
03A1: 112800  			ld 		de,40 						; advance down one row.
03A4: FD19    			add 	iy,de 
              	
03A6: 11B0FC  			ld 		de,$F800+40*30 				; the end of the physical display
03A9: FDE5    			push 	iy
03AB: E1      			pop 	hl
03AC: 37      			scf
03AD: ED52    			sbc 	hl,de
03AF: 3003    			jr 		nc,_SPRExit 				; past the bottom,exit.
              	
03B1: C31D03  			jp 		_SPRStartNextCharacterRow 	; do the next character row.
              	
03B4:         	_SPRExit:
03B4: DD7E07  			ld 		a,(ix+SPRstatus) 			; toggle the drawn status bit
03B7: EE80    			xor 	$80
03B9: DD7707  			ld 		(ix+SPRstatus),a 		
              	
03BC: FDE1    			pop 	iy 							; restore registers
03BE: E1      			pop 	hl
03BF: D1      			pop 	de
03C0: C1      			pop 	bc
03C1: F1      			pop 	af
03C2: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	;		Allocate 0-3 UDGs to the character space according to need and availability.
              	; 		Fail with CS if can't.
              	;		If possible,
              	;			all new UDGs should have the copied graphic from the background and the
              	;			old background set up.
              	;			the UDGs should replace the graphics in IY.
              	;
              	; *********************************************************************************************
              	
03C3:         	_SPRAllocateRow:
03C3: C5      			push 	bc 							; save BC.
03C4: FDE5    			push 	iy 							; save IY
03C6: ED73D204			ld 		(_SPRAllocSPTemp),sp		; save SP as we are using it for temp.
              	
03CA: DDCB077E			bit 	7,(ix+SPRstatus) 			; are we erasing ?
03CE: 2807    			jr 		z,_SPRARNotErasing
              	
03D0: FD7E00  			ld 		a,(iy+0) 					; if erasing, check if row is drawn on UDGs
03D3: FE80    			cp 		SPRLowSprite
03D5: 384C    			jr 		c,_SPRAllocateExit 			; and if so don't allocate the row, exit.
              	
03D7:         	_SPRARNotErasing:		
03D7: 210000  			ld 		hl,$0000 					; we save all the allocated so far on the stack
03DA: E5      			push 	hl 		 					; this is the end marker.					
              			;
              			; 		Do 2 or 3. For each overwrite the XOR code addresses and save
              			;		it on the stack. If it fails, then unwind everything.
              			;
03DB: CD2B04  			call 	_SPRAllocateOne 			; do (IY)
03DE: 3821    			jr 		c,_SPRAllocateUndo 			; if done, then Undo.
03E0: 227003  			ld 		(_SPRLeftUDGPosition+1),hl 	; overwrite the code.
03E3: E5      			push 	hl
              	
03E4: FD23    			inc 	iy		
03E6: CD2B04  			call 	_SPRAllocateOne 			; do (IY+1)
03E9: 3816    			jr 		c,_SPRAllocateUndo 			; if done, then Undo.
03EB: 227503  			ld 		(_SPRMiddleUDGPosition+1),hl ; overwrite the code.
03EE: E5      			push 	hl
              	
03EF: DDCB0646			bit 	0,(ix+SPRcontrol) 			; if 8 width then we are done.
03F3: 282D    			jr 		z,_SPRAllocateOkay 
              	
03F5: FD23    			inc 	iy		
03F7: CD2B04  			call 	_SPRAllocateOne 			; do (IY+2)
03FA: 3805    			jr 		c,_SPRAllocateUndo 			; if done, then Undo.
03FC: 228103  			ld 		(_SPRRightUDGPosition+1),hl ; overwrite the code.
03FF: 1821    			jr 		_SPRAllocateOkay 
              			;
              			; 		Failed, so pop the saved UDG addresses on the stack and reset
              			;	 	as if we hadn't allocated it. We haven't bumped the usage count yet.
              			;
0401:         	_SPRAllocateUndo:
0401: D1      			pop 	de 							; address of UDG into DE
0402: 7A      			ld 		a,d 						; have we done the whole lot ?
0403: B3      			or 		e
0404: 37      			scf
0405: 281C    			jr 		z,_SPRAllocateExit 			; if so, e.g. popped $0000 with carry set.
              	
0407: CB3A    			srl 	d 							; divide by 8 - will put the UDG number into E
0409: CB1B    			rr 		e
040B: CB3A    			srl 	d
040D: CB1B    			rr 		e
040F: CB3A    			srl 	d
0411: CB1B    			rr 		e
              			;
0413: 6B      			ld 		l,e 						; HL is the address of the original character for this UDG.
0414: 2605    			ld 		h,SPROriginalChar >> 8 		
0416: 7E      			ld 		a,(hl) 						; character the UDG replaced
0417: 36FF    			ld 		(hl),$FF 					; mark that UDG as now available
              	
0419: 2607    			ld 		h,SPRLowAddress >> 8 		; get screen address into DE
041B: 5E      			ld 		e,(hl)
041C: 2608    			ld 		h,SPRHighAddress >> 8 
041E: 56      			ld 		d,(hl)
              	
041F: 12      			ld 		(de),a 						; fix up screen
              	
0420: 18DF    			jr 		_SPRAllocateUndo 			; and see if there are any more to undo
              			;
              			; 		Worked, exit with carry clear.
              			;
0422:         	_SPRAllocateOkay: 							; clear carry flag and exit.
0422: AF      			xor 	a		
0423:         	_SPRAllocateExit:
0423: ED7BD204			ld 		sp,(_SPRAllocSPTemp)		; get SP back
0427: FDE1    			pop 	iy 							; restore BC IY
0429: C1      			pop 	bc				
042A: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	; 		Allocate a single UDG sprite, overwriting (IY), saving the original and copying
              	; 		the definition. On exit HL points to its graphic definition.
              	;
              	; *********************************************************************************************
              	
042B:         	_SPRAllocateOne:
042B: FD7E00  			ld 		a,(iy+0) 					; is it a UDG already
042E: FE80    			cp 		SPRLowSprite 				; if so, we don't need to do anything.
0430: 3033    			jr 		nc,_SPRAllocateOneExit
              			;
              			; 		Look for a free UDG, e.g. one where the stored character is $FF.
              			;
0432: 218005  			ld 		hl,SPROriginalChar+SPRLowSprite
0435:         	_SPRAOFind: 								; look for an available UDG.
0435: 7E      			ld 		a,(hl)
0436: FEFF    			cp 		$FF
0438: 2805    			jr 		z,_SPRAOFound
043A: 2C      			inc 	l
043B: 20F8    			jr 		nz,_SPRAOFind		
043D: 37      			scf 								; nope, we just can't do this one.
043E: C9      			ret
              	;
              	;  		Found a sprite we can allocate
              	;
043F:         	_SPRAOFound:
              			;
              			; 		Store the character overwritten by the UDG
              			;
043F: FD7E00  			ld 		a,(iy+0) 					; this is the original character e.g. what is underneath
0442: 77      			ld 		(hl),a 						; put in storage slot for original character
              			;
0443: FDE5    			push 	iy 							; save the address of that character so we can restore it.
0445: C1      			pop 	bc 							; when it drops to zero.
0446: 2607    			ld 		h,SPRLowAddress >> 8
0448: 71      			ld 		(hl),c
0449: 2608    			ld 		h,SPRHighAddress >> 8
044B: 70      			ld 		(hl),b
              			;
              			; 		Copy the graphic definition of the original character into the UDG.
              			;
              	
044C: FD7E00  			ld 		a,(iy+0) 					; get the original character , e.g. the non UDG
044F: FD7500  			ld 		(iy+0),l 					; override it.
              			;
0452: CD6F04  			call 	_SPRCalculateDefinitionAddr ; HL is the graphic of the original character
0455: EB      			ex 		de,hl
0456: FD7E00  			ld 		a,(iy+0) 					; HL is the graphic of the UDG
0459: CD6F04  			call 	_SPRCalculateDefinitionAddr
045C: EB      			ex 		de,hl 						; we want it copied there
045D: 010800  			ld 		bc,8 						; copy 8 bytes
0460: EDB0    			ldir
              	
0462: FD7E00  			ld 		a,(iy+0) 					; get the address of the UDG and exit with CC
0465:         	_SPRAllocateOneExit;
0465: CD6F04  			call 	_SPRCalculateDefinitionAddr ; get the definition address in HL
0468: 3AD104  			ld 		a,(_SPRInitialYOffset) 		; adjust for initial Y offset
046B: B5      			or 		l
046C: 6F      			ld 		l,a
046D: AF      			xor 	a 							; clear carry.
046E: C9      			ret 			
              	;
              	; 		A is a character #, point HL to CRAM Address
              	;
046F:         	_SPRCalculateDefinitionAddr:
046F: 6F      			ld 		l,a
0470: 261E    			ld 		h,$F0/8
0472: 29      			add 	hl,hl
0473: 29      			add 	hl,hl
0474: 29      			add 	hl,hl
0475: C9      			ret
              	
              	; *********************************************************************************************
              	;
              	;							Adjust usage counter for (IY)
              	;
              	; *********************************************************************************************
              	
0476:         	SPRAdjustUsageCounter:
0476: FD6E00  			ld 		l,(iy+0) 					; point HL to the usage counter
0479: 2606    			ld 		h,SPRUsageCount >> 8
047B: DDCB077E			bit 	7,(ix+SPRstatus)			; if drawn status is non-zero we are erasing
047F: 2002    			jr 		nz,_SPRDecrementUsage
0481: 34      			inc 	(hl)						; increment usage counter and exit
0482: C9      			ret
              	;
0483:         	_SPRDecrementUsage:
0483: 35      			dec 	(hl) 						; one fewer usage
0484: C0      			ret 	nz 							; still in use.
              			;
              			; 		Count zero, free up. Could consider delaying this until actually needed?
              			;
0485: 2607    			ld 		h,SPRLowAddress >> 8 		; display address in DE
0487: 5E      			ld 		e,(hl)
0488: 2608    			ld 		h,SPRHighAddress >> 8
048A: 56      			ld 		d,(hl)
048B: 2605    			ld 		h,SPROriginalChar >> 8 		; original character written to DE
048D: 7E      			ld 		a,(hl)
048E: 12      			ld 		(de),a 					
              	
048F: 36FF    			ld 		(hl),$FF 					; mark the UDG as free again.
0491: C9      			ret
              	
              	
              	; *********************************************************************************************
              	;
              	;						Flip ADE - byteflip D or DE and swap.
              	;
              	; *********************************************************************************************
              	
0492:         	SPRFlipDE:
0492: 7A      			ld 	 	a,d 						; flip D
0493: CDA404  			call 	_SPRFlipA
0496: 57      			ld 		d,a
0497: DDCB0646			bit 	0,(IX+SPRcontrol)  			; if width 1 exit.
049B: C8      			ret 	z
              	
049C: 6B      			ld 		l,e 						; save E
049D: 5F      			ld 		e,a 						; put flipped D into E
049E: 7D      			ld 		a,l 						; get old E, flip into D
049F: CDA404  			call 	_SPRFlipA
04A2: 57      			ld 		d,a
04A3: C9      			ret
              	;
              	; 		Flip A
              	;		
04A4:         	_SPRFlipA:
04A4: B7      			or 		a 							; shortcut, reverse zero.
04A5: C8      			ret 	z
04A6: CDAD04  			call 	_SPRFlipLow 				; flip the low nibble
04A9: 0F      			rrca 								; swap halves
04AA: 0F      			rrca
04AB: 0F      			rrca
04AC: 0F      			rrca 								; then fall through to flip high nibble.
04AD:         	_SPRFlipLow:			
04AD: F5      			push 	af 							; save original
04AE: E60F    			and 	$0F 						; access the flip value.
04B0: C6C0    			add 	_SPRFlipTable & $FF
04B2: 6F      			ld 		l,a
04B3: 2604    			ld 		h,_SPRFlipTable >> 8 
04B5: F1      			pop 	af 							; restore original
04B6: E6F0    			and 	$F0 						; replace lower nibble
04B8: B6      			or 		(hl)
04B9: C9      			ret
              	;
              	;		One Nibble Reversed.
              	;
04BA: 00000000			.align 	16,0 						; all in one page.
04BE: 0000    	
              	
04C0:         	_SPRFlipTable:
04C0: 0008040C			.db 	0,8,4,12,2,10,6,14
04C4: 020A060E	
04C8: 0109050D			.db 	1,9,5,13,3,11,7,15
04CC: 030B070F	
              	
              	; *********************************************************************************************
              	;
              	; 									General Data
              	;
              	; *********************************************************************************************
              	
04D0:         	_SPRRowCount: 								; down counter for completed rows.
04D0: 00      			.db 	0
              	
04D1:         	_SPRInitialYOffset: 						; the initial vertical offset.
04D1: 00      			.db 	0
              	
04D2:         	_SPRAllocSPTemp: 							; save SP when storing interim results on stack
04D2: 0000    			.dw 	0
              	
              	; *********************************************************************************************
              	;
              	;		Sprite/UDG Specific Data. Each of these is a 256 byte array aligned
              	; 		on a page. This is a bit wasteful if you don't have many sprites but quicker.
              	;
              	; *********************************************************************************************
              	
04D4: 00000000			.align 	256,0
04D8: 00...   	
              	
0500:         	SPRDataBlock:
              	
              	;
              	;		This is the original value stored the UDG replaced. When $FF it means
              	; 		this UDG is not in use.
              	;
0500:         	SPROriginalChar:
0500: FFFFFFFF			.ds 	256
0504: FF...   	
              	;
              	;
              	; 		This is the number of sprites using the given UDG, indexed on zero.
              	;
0600:         	SPRUsageCount:
0600: FFFFFFFF			.ds 	256
0604: FF...   	
              	;
              	; 		The address of that replaced UDG. 
              	;
0700:         	SPRLowAddress:
0700: FFFFFFFF			.ds 	256
0704: FF...   	
0800:         	SPRHighAddress:
0800: FFFFFFFF			.ds 	256
0804: FF...   	
              	
0900:         	SPRDataBlockEnd:
              	
0900:         	start:
0900: F3      			di
0901: 210A09  			ld 		hl,SpriteData
0904: 110800  			ld 		de,SpriteCount
0907: CD0502  			call 	SPMReset
              	
              	
              	; *********************************************************************************************
              	;										Test data
              	; *********************************************************************************************
              	
090A:         	SpriteData:
090A: FFFFFFFF			.ds 	16*SPMCount
090E: FF...   	
              	
2E1A:         	SpriteDemo:		
2E1A: 0400    			.dw 	4 							; X
2E1C: 0A00    			.dw 	10 							; Y
2E1E: 722E    			.dw 	SpriteGraphic4 				; Graphics
2E20: 0000    			.dw 	$00 						; Control
              	
2E22:         	SpriteGraphic:
2E22: FF818181			.db 	$FF,$81,$81,$81,$81,$81,$81,$FF
2E26: 818181FF	
              	
2E2A:         	SpriteDemo2:		
2E2A: 1300    			.dw 	19 							; X
2E2C: 1C00    			.dw 	28 							; Y
2E2E: 522E    			.dw 	SpriteGraphic3	 			; Graphics
2E30: 0300    			.dw 	$03							; Control
              	
2E32:         	SpriteGraphic2:
2E32: FFFF0180			.dw 	$FFFF,$8001,$F001,$8001,$8001,$8001,$8001,$AAAA
2E36: 01F00180	
2E3A: 01800180	
2E3E: 0180AAAA	
2E42: 555503C0			.dw 	$5555,$C003,$C003,$E007,$F00F,$F81F,$FC3F,$03C0
2E46: 03C007E0	
2E4A: 0FF01FF8	
2E4E: 3FFCC003	
              	
2E52:         	SpriteGraphic3:
2E52: 00800040			.dw 	$8000,$4000,$2000,$1000,$0800,$0400,$0200,$0100
2E56: 00200010	
2E5A: 00080004	
2E5E: 00020001	
2E62: 80004000			.dw 	$0080,$0040,$0020,$0010,$0008,$000C,$000E,$000F
2E66: 20001000	
2E6A: 08000C00	
2E6E: 0E000F00	
              	
2E72:         	SpriteGraphic4:
2E72: 80402010			.db 	$80,$40,$20,$10,8,12,14,15
2E76: 080C0E0F	
              	


total time: 0.0038 sec.
no errors
